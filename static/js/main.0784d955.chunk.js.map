{"version":3,"sources":["components/shared/Background/Background.jsx","components/shared/AlgoLayout/AlgoHead.jsx","components/shared/AlgoLayout/AlgoOverview.jsx","algo-data/sorting/bubbleSort.js","algo-data/sorting/quickSort.js","algo-data/sorting/mergeSort.js","algo-data/sorting/timSort.js","components/algos-sorting/SortingVisualization.jsx","components/algos-pathfinding/PathfindingVisualization.jsx","components/algos-sudoku/SudokuVisualization.jsx","components/shared/AlgoLayout/AlgoVisualization.jsx","components/shared/AlgoLayout/AlgoExplanation.jsx","components/shared/AlgoLayout/AlgoCode.jsx","components/shared/AlgoLayout/AlgoLayout.jsx","algo-data/sorting/sortingAlgorithmsInformaion.js","pages/SortingAlgos.jsx","App.js","reportWebVitals.js","index.js"],"names":["boxes","i","push","Background","props","moveSingleBox","target","anime","targets","id","translateX","random","translateY","easing","duration","useEffect","timeline","add","opacity","endDelay","scale","scaleX","scaleY","delay","stagger","rotateX","strokeDashoffset","setDashoffset","fill","className","map","boxNum","onClick","AlgoHead","currentAlgo","algos","changeAlgoHandler","useState","showSelection","setShowSelection","onSelectHandler","e","onMouseEnter","onMouseLeave","src","process","alt","a","name","difficulty","AlgoOverview","intro","complexity","showComplexity","setShowComplexity","onMouseOver","worstTime","bestTime","avgTime","space","bubbleSort","exit","array","stickWidth","speed","addColor","sleep","moveStickTo","removeColor","finished","length","j","oldJ","document","getElementsByClassName","err","quickSort","high","partition","low","pivot","console","log","qs","partitionIndex","mergeSort","arr","ms","mid","Math","floor","leftHalf","slice","rightHalf","k","elementAtK","getElementById","style","height","classList","doc","parseFloat","timSort","calcMinRun","n","r","insertionSort","left","right","merge","l","m","len1","len2","minRun","start","end","min","size","ts","milliseconds","Promise","resolve","setTimeout","SortingVisualization","algo","sticksAmount","setSticksAmount","sticks","setSticks","isRunning","setIsRunning","newSticks","setSpeed","stick","move","presetButtonHandler","amount","ElementClassName","addClassName","remove","startButtonHandler","index","width","viewBox","xmlns","d","stroke","htmlFor","onChange","value","max","type","PathfindingVisualization","SudokuVisualization","AlgoVisualization","algosType","AlgoExplanation","explanation","AlgoCode","code","isIn","num","output","forEach","numberOfSticks","stickHeight","round","AlgoLayout","currentAlgoData","setCurrentAlgo","newAlgo","sortingAlgorithms","sorting","App","routes","path","exact","SortingAlgos","to","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0784d955.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { anime } from 'react-anime';\r\n\r\nconst boxes = [];\r\nconst boxesAmount = 50;\r\n\r\nfor (let i = 0; i < boxesAmount; i++) {\r\n    boxes.push(i);\r\n}\r\n\r\nconst Background = (props) => {\r\n    const moveSingleBox = ({ target }) => {\r\n        anime({\r\n            targets: `.${target.id}`,\r\n            translateX: () => anime.random(-800, 800),\r\n            translateY: () => anime.random(-300, -900),\r\n            easing: 'linear',\r\n            duration: 1500,\r\n        });\r\n    };\r\n\r\n    const backgroundAnimation = () => {\r\n        const timeline = anime.timeline();\r\n        timeline\r\n            .add({\r\n                targets: '.wrapper',\r\n                opacity: [0, 1],\r\n                duration: 100,\r\n                endDelay: 500,\r\n            })\r\n            .add({\r\n                targets: '', ////////////////////////////////////////////// CLASSES !!!!!!!!!!\r\n                scale: [0.5, 1],\r\n                easing: 'spring(1, 100, 10, 10)',\r\n                duration: 1000,\r\n            })\r\n            .add(\r\n                {\r\n                    targets: '.block',\r\n                    opacity: 1,\r\n                    translateX: () => anime.random(-800, 800),\r\n                    translateY: () => anime.random(500, 3000),\r\n                    scaleX: () => anime.random(1, 2),\r\n                    scaleY: () => anime.random(1, 5),\r\n                    easing: 'linear',\r\n                    duration: 1500,\r\n                    delay: anime.stagger(5),\r\n                },\r\n                '-=1500'\r\n            )\r\n            .add(\r\n                {\r\n                    targets: '.Home_main__1x8gC',\r\n                    opacity: [0, 1],\r\n                    rotateX: [-90, 0],\r\n                    duration: 1000,\r\n                    easing: 'linear',\r\n                },\r\n                '-=1500'\r\n            )\r\n            .add(\r\n                {\r\n                    targets: '.main-header',\r\n                    rotateX: [-90, 0],\r\n                    duration: 1000,\r\n                    easing: 'linear',\r\n                },\r\n                '-=1000'\r\n            )\r\n            .add(\r\n                {\r\n                    targets: ['.main-navigation-logo-img', '.Home_title_logo_img__1gmXd'],\r\n                    translateX: [-50, 0],\r\n                    opacity: [0, 1],\r\n                    duration: 300,\r\n                    easing: 'easeInOutQuad',\r\n                },\r\n                '-=300'\r\n            )\r\n            .add({\r\n                targets: '.Home_title_logo_img__1gmXd path',\r\n                strokeDashoffset: [anime.setDashoffset, 0],\r\n                easing: 'easeInOutSine',\r\n                duration: 1000,\r\n            })\r\n            .add(\r\n                {\r\n                    targets: '.Home_title_logo_img__1gmXd path',\r\n                    fill: 'rgba(0, 255, 234, 1)',\r\n                    easing: 'linear',\r\n                    duration: 1000,\r\n                },\r\n                '-=500'\r\n            );\r\n    };\r\n\r\n    useEffect(() => backgroundAnimation(), []);\r\n\r\n    return (\r\n        <div className=\"background-container\">\r\n            {boxes.map((boxNum) => (\r\n                <div\r\n                    key={`box-${boxNum}`}\r\n                    className={`block box-${boxNum}`}\r\n                    id={`box-${boxNum}`}\r\n                    onClick={moveSingleBox}\r\n                ></div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Background;\r\n","import React, { useState } from 'react';\r\n\r\nimport './AlgoHead.css';\r\n\r\nconst AlgoHead = ({ currentAlgo, algos, changeAlgoHandler }) => {\r\n    const [showSelection, setShowSelection] = useState(false);\r\n\r\n    const onSelectHandler = (e) => {\r\n        changeAlgoHandler(e.target.className);\r\n        setShowSelection(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"algo-head-container\">\r\n            <div onMouseEnter={() => setShowSelection(true)} onMouseLeave={() => setShowSelection(false)}>\r\n                <h1>\r\n                    {`${currentAlgo} `}\r\n                    <img className=\"dropdown-arrow\" src={process.env.PUBLIC_URL + '/dropdownArrow.png'} alt=\"\" />\r\n                </h1>\r\n                {showSelection && (\r\n                    <div className=\"algo-selection\">\r\n                        {algos.map((a) => {\r\n                            return (\r\n                                <h2 onClick={onSelectHandler} className={a.name} key={a.name}>\r\n                                    {`${a.name} (${a.difficulty})`}\r\n                                </h2>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <h3>Home</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgoHead;\r\n","import React, { useState } from 'react';\r\n\r\nimport './AlgoOverview.css';\r\n\r\nconst AlgoOverview = ({ intro, complexity }) => {\r\n    const [showComplexity, setShowComplexity] = useState(false);\r\n\r\n    const mouseOverHandler = () => {\r\n        setShowComplexity(true);\r\n    };\r\n\r\n    const mouseDownHandler = () => {\r\n        setShowComplexity(false);\r\n    };\r\n    return (\r\n        <div className=\"algo-overview\">\r\n            <div className=\"intro-container\">\r\n                <p>{intro}</p>\r\n            </div>\r\n            <div onMouseOver={mouseOverHandler} onMouseLeave={mouseDownHandler} className=\"complexity-container\">\r\n                {!showComplexity && <h3>Time & Space Complexity</h3>}\r\n                {showComplexity && (\r\n                    <div className=\"complexity-box\">\r\n                        <h4>Worst Case Time Complexity: {complexity.worstTime}</h4>\r\n                        <h4>Best Case Time Complexity: {complexity.bestTime}</h4>\r\n                        <h4>Average Case Time Complexity: {complexity.avgTime}</h4>\r\n                        <h4>Space Complexity: {complexity.space}</h4>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgoOverview;\r\n","const bubbleSort = async (exit, array, stickWidth, speed, addColor, sleep, moveStickTo, removeColor) => {\r\n    // BUBBLE SORT\r\n    let finished = false;\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        //////// maybe implement while loop to pause and save i.\r\n        finished = true;\r\n        if (exit) break;\r\n        for (let j = 0; j < array.length - 1; j++) {\r\n            exit = !exit ? addColor(`stick-${j}`) : null;\r\n            exit = !exit ? addColor(`stick-${j + 1}`) : null;\r\n\r\n            // sleeping time represents the comparison\r\n            await sleep(500 / speed);\r\n            if (array[j] > array[j + 1]) {\r\n                finished = false;\r\n                // swap visually\r\n                moveStickTo(`.stick-${j}`, 2 * stickWidth * (j + 1));\r\n                moveStickTo(`.stick-${j + 1}`, 2 * stickWidth * j);\r\n                await sleep(1001 / speed);\r\n\r\n                // swap in code\r\n                [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n\r\n                // swap classes\r\n                try {\r\n                    let oldJ = document.getElementsByClassName(`stick-${j}`)[0];\r\n                    document.getElementsByClassName(`stick-${j + 1}`)[0].className = `stick-${j}`;\r\n                    oldJ.className = `stick-${j + 1}`;\r\n                } catch (err) {\r\n                    exit = true;\r\n                }\r\n            }\r\n            exit = !exit ? removeColor(`stick-${j}`) : null;\r\n            exit = !exit ? removeColor(`stick-${j + 1}`) : null;\r\n            if (exit) break;\r\n        }\r\n        if (finished) return;\r\n    }\r\n};\r\n\r\nexport default bubbleSort;\r\n\r\n// const bubbleSort = (array) => {\r\n//     let finished = false;\r\n//     for (let i = 0; i < array.length - 1; i++) {\r\n//         finished = true;\r\n//         for (let j = 0; j < array.length - 1; j++) {\r\n//             if (array[j] > array[j + 1]) {\r\n//                 [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n//                 finished = false\r\n//             }\r\n\r\n//         }\r\n//         if (finished) return;\r\n//     }\r\n// };\r\n\r\n// bubbleSort();\r\n","const quickSort = async (array, high, stickWidth, speed, addColor, sleep, moveStickTo) => {\r\n    const partition = async (array, low, high) => {\r\n        let i = low - 1;\r\n        let pivot = array[high];\r\n        if (addColor(`stick-${high}`, 'red')) return;\r\n        for (let j = low; j < high; j++) {\r\n            if (array[j] <= pivot) {\r\n                i++;\r\n                // swap visually\r\n                moveStickTo(`.stick-${j}`, 2 * stickWidth * i);\r\n                moveStickTo(`.stick-${i}`, 2 * stickWidth * j);\r\n                await sleep(1001 / speed);\r\n\r\n                // swap in code\r\n                [array[j], array[i]] = [array[i], array[j]];\r\n\r\n                // swap classes\r\n                try {\r\n                    let oldJ = document.getElementsByClassName(`stick-${j}`)[0];\r\n                    document.getElementsByClassName(`stick-${i}`)[0].className = `stick-${j}`;\r\n                    oldJ.className = `stick-${i}`;\r\n                } catch (err) {\r\n                    // exit = true;\r\n                }\r\n                if (addColor(`stick-${i}`, 'light-grey')) return;\r\n            }\r\n            if (addColor(`stick-${j}`)) return;\r\n            await sleep(1001 / speed);\r\n        }\r\n\r\n        // swap visually\r\n        moveStickTo(`.stick-${high}`, 2 * stickWidth * (i + 1));\r\n        moveStickTo(`.stick-${i + 1}`, 2 * stickWidth * high);\r\n        await sleep(1001 / speed);\r\n\r\n        // swap in code\r\n        [array[i + 1], array[high]] = [array[high], array[i + 1]];\r\n\r\n        // swap classes\r\n        try {\r\n            let oldJ = document.getElementsByClassName(`stick-${high}`)[0];\r\n            document.getElementsByClassName(`stick-${i + 1}`)[0].className = `stick-${high}`;\r\n            oldJ.className = `stick-${i + 1}`;\r\n        } catch (err) {\r\n            // exit = true;\r\n        }\r\n\r\n        //  reset all colors\r\n        try {\r\n            for (let i = 0; i < array.length; i++)\r\n                document.getElementsByClassName(`stick-${i}`)[0].className = `stick-${i}`;\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n        return i + 1;\r\n    };\r\n    const qs = async (array, low, high) => {\r\n        if (array.length === 1) return array;\r\n        if (low < high) {\r\n            const partitionIndex = await partition(array, low, high);\r\n\r\n            await qs(array, low, partitionIndex - 1);\r\n            await qs(array, partitionIndex, high);\r\n        }\r\n    };\r\n    await qs(array, 0, high);\r\n};\r\n\r\nexport default quickSort;\r\n\r\n// const partition = (array, low, high) => {\r\n//     let i = low - 1;\r\n//     let pivot = array[high];\r\n//     for (let j = low; j < high; j++) {\r\n//         if (array[j] <= pivot) {\r\n//             i++;\r\n//             [array[i], array[j]] = [array[j], array[i]];\r\n//         }\r\n//     }\r\n//     [array[i + 1], array[high]] = [array[high], array[i + 1]];\r\n//     return i + 1;\r\n// };\r\n// const qs = async (array, low, high) => {\r\n//     if (array.length === 1) return array;\r\n//     if (low < high) {\r\n//         const partitionIndex = partition(array, low, high);\r\n\r\n//         qs(array, low, partitionIndex - 1);\r\n//         qs(array, partitionIndex, high);\r\n//     }\r\n// };\r\n\r\n// let a = [3, 4, 1, 9, 2, 3, 0, 1];\r\n\r\n// qs(a, 7).then(() => console.log(a));\r\n","const mergeSort = async (arr, stickWidth, speed, addColor, sleep, removeColor, moveStickTo) => {\r\n    const ms = async (array) => {\r\n        if (array.length > 1) {\r\n            const mid = Math.floor(array.length / 2);\r\n            const leftHalf = array.slice(0, mid);\r\n            const rightHalf = array.slice(mid);\r\n\r\n            await ms(leftHalf);\r\n            await ms(rightHalf);\r\n\r\n            let i, j, k;\r\n            i = j = k = 0;\r\n            while (i < leftHalf.length && j < rightHalf.length) {\r\n                if (leftHalf[i] < rightHalf[j]) {\r\n                    const elementAtK = document.getElementById(`stick-${array[k]}`);\r\n                    elementAtK.style.height = `${leftHalf[i]}%`;\r\n                    addColor(elementAtK.classList[0]);\r\n\r\n                    await sleep(1001 / speed);\r\n                    removeColor(elementAtK.classList[0]);\r\n                    array[k] = leftHalf[i];\r\n                    i++;\r\n                } else {\r\n                    const elementAtK = document.getElementById(`stick-${array[k]}`);\r\n                    elementAtK.style.height = `${rightHalf[j]}%`;\r\n                    addColor(elementAtK.classList[0]);\r\n\r\n                    await sleep(1001 / speed);\r\n                    removeColor(elementAtK.classList[0]);\r\n                    array[k] = rightHalf[j];\r\n                    j++;\r\n                }\r\n                k++;\r\n            }\r\n            while (i < leftHalf.length) {\r\n                const elementAtK = document.getElementById(`stick-${array[k]}`);\r\n                elementAtK.style.height = `${leftHalf[i]}%`;\r\n                addColor(elementAtK.classList[0]);\r\n\r\n                await sleep(1001 / speed);\r\n                removeColor(elementAtK.classList[0]);\r\n\r\n                array[k] = leftHalf[i];\r\n                i++;\r\n                k++;\r\n            }\r\n            while (j < rightHalf.length) {\r\n                const elementAtK = document.getElementById(`stick-${array[k]}`);\r\n                elementAtK.style.height = `${rightHalf[j]}%`;\r\n                addColor(elementAtK.classList[0]);\r\n\r\n                await sleep(1001 / speed);\r\n                removeColor(elementAtK.classList[0]);\r\n                array[k] = rightHalf[j];\r\n                j++;\r\n                k++;\r\n            }\r\n        }\r\n    };\r\n    await ms(arr);\r\n    // resetting ids\r\n    for (let i = 0; i < arr.length; i++) {\r\n        document.getElementsByClassName(`stick-${i}`)[0].id = '';\r\n    }\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const doc = document.getElementsByClassName(`stick-${i}`)[0];\r\n        doc.id = `stick-${parseFloat(doc.style.height)}`;\r\n    }\r\n};\r\nexport default mergeSort;\r\n\r\n// const mergeSort = async (array) => {\r\n//     if (array.length > 1) {\r\n//         const mid = Math.floor(array.length / 2);\r\n//         const leftHalf = array.slice(0, mid);\r\n//         const rightHalf = array.slice(mid);\r\n\r\n//         mergeSort(leftHalf);\r\n//         mergeSort(rightHalf);\r\n\r\n//         let i, j, k;\r\n//         i = j = k = 0;\r\n//         while (i < leftHalf.length && j < rightHalf.length) {\r\n//             if (leftHalf[i] < rightHalf[j]) {\r\n//                 array[k] = leftHalf[i];\r\n//                 i++;\r\n//             } else {\r\n//                 array[k] = rightHalf[j];\r\n//                 j++;\r\n//             }\r\n//             k++;\r\n//         }\r\n//         while (i < leftHalf.length) {\r\n//             array[k] = leftHalf[i];\r\n//             i++;\r\n//             k++;\r\n//         }\r\n//         while (j < rightHalf.length) {\r\n//             array[k] = rightHalf[j];\r\n//             j++;\r\n//             k++;\r\n//         }\r\n//     }\r\n// };\r\n\r\n// let a = [3, 4, 1, 9, 2, 3, 0, 1];\r\n\r\n// mergeSort(a, 7).then(() => console.log(a));\r\n","const timSort = async (array, stickWidth, speed, addColor, sleep, removeColor, moveStickTo) => {\r\n    const minMerge = 32;\r\n\r\n    const calcMinRun = (n) => {\r\n        let r = 0;\r\n        while (n >= minMerge) {\r\n            r = r | (n & 1);\r\n            n >>= 1;\r\n        }\r\n        return n + r;\r\n    };\r\n\r\n    const insertionSort = async (arr, left, right) => {\r\n        for (let i = left + 1; i < right + 1; i++) {\r\n            let j = i;\r\n\r\n            while (j > left && arr[j] < arr[j - 1]) {\r\n                //////////////////////////////////// SWAP !!!!!!!!!!!!!!!!!\r\n                moveStickTo(`.stick-${j}`, 2 * stickWidth * (j - 1));\r\n                moveStickTo(`.stick-${j - 1}`, 2 * stickWidth * j);\r\n                await sleep(1001 / speed);\r\n\r\n                [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]];\r\n\r\n                try {\r\n                    let oldJ = document.getElementsByClassName(`stick-${j}`)[0];\r\n                    document.getElementsByClassName(`stick-${j - 1}`)[0].className = `stick-${j}`;\r\n                    oldJ.className = `stick-${j - 1}`;\r\n                } catch (err) {\r\n                    // exit = true;\r\n                    console.log(err);\r\n                }\r\n\r\n                j--;\r\n            }\r\n        }\r\n    };\r\n\r\n    const merge = async (arr, l, m, r) => {\r\n        const [len1, len2] = [m - l + 1, r - m];\r\n        const [left, right] = [[], []];\r\n\r\n        for (let i = 0; i < len1; i++) {\r\n            left.push(arr[l + i]);\r\n        }\r\n        for (let i = 0; i < len2; i++) {\r\n            right.push(arr[m + 1 + i]);\r\n        }\r\n\r\n        let i, j, k;\r\n        i = j = 0;\r\n        k = l;\r\n\r\n        while (i < len1 && j < len2) {\r\n            if (left[i] <= right[j]) {\r\n                const elementAtK = document.getElementById(`stick-${arr[k]}`);\r\n                elementAtK.style.height = `${left[i]}%`;\r\n\r\n                await sleep(10001 / speed);\r\n                arr[k] = left[i];\r\n                i++;\r\n            } else {\r\n                const elementAtK = document.getElementById(`stick-${arr[k]}`);\r\n                elementAtK.style.height = `${right[j]}%`;\r\n\r\n                await sleep(10001 / speed);\r\n                arr[k] = right[j];\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < len1) {\r\n            const elementAtK = document.getElementById(`stick-${arr[k]}`);\r\n            elementAtK.style.height = `${left[i]}%`;\r\n\r\n            await sleep(10001 / speed);\r\n            arr[k] = left[i];\r\n            k++;\r\n            i++;\r\n        }\r\n        while (j < len2) {\r\n            const elementAtK = document.getElementById(`stick-${arr[k]}`);\r\n            elementAtK.style.height = `${right[j]}%`;\r\n\r\n            await sleep(10001 / speed);\r\n            arr[k] = right[j];\r\n            k++;\r\n            j++;\r\n        }\r\n\r\n        // resetting ids\r\n        for (let i = 0; i < arr.length; i++) {\r\n            document.getElementsByClassName(`stick-${i}`)[0].id = '';\r\n        }\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const doc = document.getElementsByClassName(`stick-${i}`)[0];\r\n            doc.id = `stick-${parseFloat(doc.style.height)}`;\r\n        }\r\n    };\r\n\r\n    const ts = async (arr) => {\r\n        const n = arr.length;\r\n        const minRun = calcMinRun(n);\r\n\r\n        for (let start = 0; start < n; start += minRun) {\r\n            const end = Math.min(start + minRun - 1, n - 1);\r\n            await insertionSort(arr, start, end);\r\n        }\r\n\r\n        console.log('now ms');\r\n\r\n        let size = minRun;\r\n        while (size < n) {\r\n            for (let left = 0; left < n; left = left + size * 2) {\r\n                const mid = Math.min(n - 1, left + size - 1);\r\n                const right = Math.min(left + 2 * size - 1, n - 1);\r\n\r\n                if (mid < right) await merge(arr, left, mid, right);\r\n            }\r\n            size = size * 2;\r\n        }\r\n    };\r\n    ts(array);\r\n    console.log(array);\r\n};\r\n\r\nexport default timSort;\r\n\r\n// const timSort = async (array) => {\r\n//     const minMerge = 64;\r\n\r\n//     const calcMinRun = (n) => {\r\n//         let r = 0;\r\n//         while (n >= minMerge) {\r\n//             r = r | (n & 1);\r\n//             n >>= 1;\r\n//         }\r\n//         return n + r;\r\n//     };\r\n\r\n//     const insertionSort = (arr, left, right) => {\r\n//         for (let i = left + 1; i < right + 1; i++) {\r\n//             let j = i;\r\n\r\n//             while (j > left && arr[j] < arr[j - 1]) {\r\n//                 //////////////////////////////////// SWAP !!!!!!!!!!!!!!!!!\r\n//                 [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]];\r\n//                 j--;\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const merge = (arr, l, m, r) => {\r\n//         const [len1, len2] = [m - l + 1, r - m];\r\n//         const [left, right] = [[], []];\r\n\r\n//         for (let i = 0; i < len1; i++) {\r\n//             left.push(arr[l + i]);\r\n//         }\r\n//         for (let i = 0; i < len2; i++) {\r\n//             right.push(arr[m + 1 + i]);\r\n//         }\r\n\r\n//         let i, j, k;\r\n//         i = j = 0;\r\n//         k = l;\r\n\r\n//         while (i < len1 && j < len2) {\r\n//             if (left[i] <= right[j]) {\r\n//                 arr[k] = left[i];\r\n//                 i++;\r\n//             } else {\r\n//                 arr[k] = right[j];\r\n//                 j++;\r\n//             }\r\n//             k++;\r\n//         }\r\n\r\n//         while (i < len1) {\r\n//             arr[k] = left[i];\r\n//             k++;\r\n//             i++;\r\n//         }\r\n//         while (j < len2) {\r\n//             arr[k] = right[j];\r\n//             k++;\r\n//             j++;\r\n//         }\r\n//     };\r\n\r\n//     const ts = async (arr) => {\r\n//         const n = arr.length;\r\n//         const minRun = calcMinRun(n);\r\n\r\n//         for (let start = 0; start < n; start += minRun) {\r\n//             const end = Math.min(start + minRun - 1, n - 1);\r\n//             insertionSort(arr, start, end);\r\n//         }\r\n\r\n//         let size = minRun;\r\n//         while (size < n) {\r\n//             for (let left = 0; left < n; left = left + size * 2) {\r\n//                 const mid = Math.min(n - 1, left + size - 1);\r\n//                 const right = Math.min(left + 2 * size - 1, n - 1);\r\n\r\n//                 if (mid < right) merge(arr, left, mid, right);\r\n//             }\r\n//             size = size * 2;\r\n//         }\r\n//     };\r\n//     ts(array);\r\n// };\r\n\r\n// let a = [\r\n//     -2,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n// ];\r\n// timSort(a).then(() => console.log(a));\r\n","import React, { useState } from 'react';\r\nimport { anime } from 'react-anime';\r\n\r\nimport bubbleSort from '../../algo-data/sorting/bubbleSort';\r\nimport quickSort from '../../algo-data/sorting/quickSort';\r\nimport mergeSort from '../../algo-data/sorting/mergeSort';\r\nimport timSort from '../../algo-data/sorting/timSort';\r\n\r\nimport './SortingVisualization.css';\r\n\r\nconst sleep = (milliseconds) => {\r\n    if (milliseconds <= 1) return;\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n};\r\n\r\nconst SortingVisualization = ({\r\n    algo,\r\n    sticksAmount,\r\n    setSticksAmount,\r\n    sticks,\r\n    setSticks,\r\n    isRunning,\r\n    setIsRunning,\r\n    newSticks,\r\n}) => {\r\n    const [speed, setSpeed] = useState(100);\r\n\r\n    const sectionWidth = 1200;\r\n    const stickWidth = sectionWidth / (sticks.length * 2 - 1);\r\n\r\n    const moveStickTo = async (stick, move) => {\r\n        anime({\r\n            targets: `${stick}`,\r\n            left: `${move}`,\r\n            easing: 'linear',\r\n            duration: 1001 / speed,\r\n        });\r\n        // document.getElementsByClassName(`stick-${stick}`)[0].style.left = `${move}px`;\r\n    };\r\n\r\n    const speedChangeHandler = (e) => {\r\n        if (isRunning) {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            }, 2000 / speed);\r\n        } else {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            }, 100);\r\n        }\r\n        setSpeed(e.target.value);\r\n    };\r\n\r\n    const amountChangeHandler = (e) => {\r\n        setSticksAmount(e.target.value);\r\n        if (isRunning) {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(e.target.value));\r\n            }, 2000 / speed);\r\n        } else {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(e.target.value));\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    const spawnButtonHandler = () => {\r\n        if (isRunning) {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            }, 2000 / speed);\r\n        } else {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    const presetButtonHandler = (speed, amount) => {\r\n        setSticksAmount(amount);\r\n        if (isRunning) {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(amount));\r\n            }, 2000 / speed);\r\n        } else {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(amount));\r\n            }, 100);\r\n        }\r\n        setSpeed(speed);\r\n    };\r\n\r\n    const addColor = (ElementClassName, addClassName = 'grey') => {\r\n        try {\r\n            document.getElementsByClassName(ElementClassName)[0].classList.add(addClassName);\r\n        } catch (err) {\r\n            console.log(err);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const removeColor = (ElementClassName, addClassName = 'grey') => {\r\n        try {\r\n            document.getElementsByClassName(ElementClassName)[0].classList.remove(addClassName);\r\n        } catch (err) {\r\n            console.log(err);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const startButtonHandler = async () => {\r\n        if (isRunning) console.log('yes');\r\n        let exit = false;\r\n        setIsRunning(true);\r\n\r\n        switch (algo) {\r\n            case 'Bubble Sort':\r\n                bubbleSort(exit, sticks, stickWidth, speed, addColor, sleep, moveStickTo, removeColor);\r\n                break;\r\n\r\n            case 'Quicksort':\r\n                quickSort(sticks, sticks.length - 1, stickWidth, speed, addColor, sleep, moveStickTo);\r\n                break;\r\n\r\n            case 'Merge Sort':\r\n                mergeSort(sticks, stickWidth, speed, addColor, sleep, removeColor, moveStickTo);\r\n                break;\r\n\r\n            case 'Tim Sort':\r\n                timSort(sticks, stickWidth, speed, addColor, sleep, removeColor, moveStickTo);\r\n                break;\r\n\r\n            default:\r\n                bubbleSort(exit, sticks, stickWidth, speed, addColor, sleep, moveStickTo, removeColor);\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"sorting-container\">\r\n            <div className=\"sticks-container\">\r\n                {sticks &&\r\n                    sticks.map((l, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className={`stick-${index}`}\r\n                            id={`stick-${l}`}\r\n                            style={{\r\n                                height: `${l}%`,\r\n                                width: `${stickWidth}px`,\r\n                                left: `${index * stickWidth * 2}px`,\r\n                            }}\r\n                        ></div>\r\n                    ))}\r\n            </div>\r\n            <div className=\"settings\">\r\n                <div className=\"settings-left\">\r\n                    <svg\r\n                        onClick={startButtonHandler}\r\n                        className=\"start-btn\"\r\n                        viewBox=\"0 0 70 80\"\r\n                        fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            d=\"M67.5001 35.67C70.8334 37.5945 70.8334 42.4057 67.5001 44.3302L7.50005 78.9712C4.16672 80.8957 5.34058e-05 78.4901 5.34058e-05 74.6411L5.34058e-05 5.35909C5.34058e-05 1.51008 4.16672 -0.895545 7.50005 1.02896L67.5001 35.67Z\"\r\n                            fill=\"white\"\r\n                            stroke=\"white\"\r\n                        />\r\n                    </svg>\r\n                    <img\r\n                        onClick={spawnButtonHandler}\r\n                        className=\"spawn-btn\"\r\n                        src={process.env.PUBLIC_URL + '/reload.png'}\r\n                        alt=\"reload\"\r\n                    />\r\n                </div>\r\n                <div className=\"settings-right\">\r\n                    <div className=\"presets\">\r\n                        <h3>Presets</h3>\r\n                        <button onClick={() => presetButtonHandler(1, 20)}>VERY SLOW</button>\r\n                        <br />\r\n                        <button onClick={() => presetButtonHandler(100, 50)}>SLOW</button>\r\n                        <br />\r\n                        <button onClick={() => presetButtonHandler(1000, 200)}>FAST</button>\r\n                    </div>\r\n                    <div className=\"custom\">\r\n                        <h3>Custom</h3>\r\n                        <label htmlFor=\"speed\">{`Speed: ${speed}`}</label>\r\n                        <br />\r\n                        <input\r\n                            name=\"speed\"\r\n                            onChange={speedChangeHandler}\r\n                            min={1}\r\n                            max={1000}\r\n                            value={speed}\r\n                            type=\"range\"\r\n                        />\r\n                        <br />\r\n                        <label htmlFor=\"amount\">{`Amount: ${sticksAmount}`}</label>\r\n                        <br />\r\n                        <input\r\n                            name=\"amount\"\r\n                            onChange={amountChangeHandler}\r\n                            min={5}\r\n                            max={200}\r\n                            value={sticksAmount}\r\n                            type=\"range\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortingVisualization;\r\n","import React from 'react';\r\n\r\nconst PathfindingVisualization = () => {};\r\n\r\nexport default PathfindingVisualization;\r\n","import React from 'react';\r\n\r\nconst SudokuVisualization = () => {};\r\n\r\nexport default SudokuVisualization;\r\n","import React from 'react';\r\n\r\nimport SortingVisualization from '../../algos-sorting/SortingVisualization';\r\nimport PathfindingVisualization from '../../algos-pathfinding/PathfindingVisualization';\r\nimport SudokuVisualization from '../../algos-sudoku/SudokuVisualization';\r\n\r\nconst AlgoVisualization = ({\r\n    algosType,\r\n    currentAlgo,\r\n    sticksAmount,\r\n    setSticksAmount,\r\n    sticks,\r\n    setSticks,\r\n    isRunning,\r\n    setIsRunning,\r\n    newSticks,\r\n}) => {\r\n    if (algosType === 'sorting')\r\n        return (\r\n            <SortingVisualization\r\n                algo={currentAlgo}\r\n                algosType={algosType}\r\n                currentAlgo={currentAlgo}\r\n                sticksAmount={sticksAmount}\r\n                setSticksAmount={setSticksAmount}\r\n                sticks={sticks}\r\n                setSticks={setSticks}\r\n                isRunning={isRunning}\r\n                setIsRunning={setIsRunning}\r\n                newSticks={newSticks}\r\n            />\r\n        );\r\n    if (algosType === 'pathfinding') return <PathfindingVisualization algo={currentAlgo} />;\r\n    if (algosType === 'sudoku') return <SudokuVisualization algo={currentAlgo} />;\r\n};\r\n\r\nexport default AlgoVisualization;\r\n","import React from 'react';\r\n\r\nimport './AlgoExplanation.css';\r\n\r\nconst AlgoExplanation = ({ explanation }) => {\r\n    return (\r\n        <div className=\"explanation-container\">\r\n            <h2>Explanation</h2>\r\n            <p>{explanation}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgoExplanation;\r\n","import React from 'react';\r\n\r\nimport './AlgoCode.css';\r\n\r\nconst AlgoCode = ({ code }) => {\r\n    return (\r\n        <div>\r\n            <div className=\"code-container\">\r\n                <h2>Code</h2>\r\n                <img src={process.env.PUBLIC_URL + `/${code}`} alt=\"algorithm-code\" />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgoCode;\r\n","import React, { useState } from 'react';\r\n\r\nimport Background from '../Background/Background';\r\n\r\nimport AlgoHead from './AlgoHead';\r\nimport AlgoOverview from './AlgoOverview';\r\nimport AlgoVisualization from './AlgoVisualization';\r\nimport AlgoExplanation from './AlgoExplanation';\r\nimport AlgoCode from './AlgoCode';\r\n\r\nimport './AlgoLayout.css';\r\nimport '../Background/Background.css';\r\n\r\nconst rndm = () => {\r\n    return Math.round(Math.random() * 999 + 1) / 10;\r\n};\r\n\r\nconst isIn = (array, num) => {\r\n    let output = false;\r\n    array.forEach((e) => {\r\n        if (e === num) output = true;\r\n    });\r\n    return output;\r\n};\r\n\r\nconst newSticks = (numberOfSticks) => {\r\n    const sticks = [];\r\n    for (let i = 0; i < numberOfSticks; i++) {\r\n        let stickHeight;\r\n        for (let j = 0; j < 1000; j++) {\r\n            let random = rndm();\r\n            if (!isIn(sticks, random)) {\r\n                stickHeight = random;\r\n                break;\r\n            }\r\n        }\r\n        sticks.push(stickHeight);\r\n    }\r\n    return sticks;\r\n};\r\n\r\n/* props.data: {\r\n    ALGOSTYPE, \r\n    ALGOS: [{\r\n        name, \r\n        intro, \r\n        explanation, \r\n        code, \r\n        complexity: {\r\n            worstTime, \r\n            bestTime, \r\n            AvgTime, \r\n            space\r\n        }\r\n            \r\n    }],\r\n    \r\n} */\r\nconst AlgoLayout = ({ algosType, algos }) => {\r\n    const [currentAlgo, setCurrentAlgo] = useState(algos[2].name);\r\n\r\n    const [sticksAmount, setSticksAmount] = useState(50);\r\n    const [sticks, setSticks] = useState(newSticks(sticksAmount));\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    let currentAlgoData;\r\n    algos.forEach((e) => (e.name === currentAlgo ? (currentAlgoData = e) : null));\r\n\r\n    const changeAlgoHandler = (newAlgo) => {\r\n        setCurrentAlgo(newAlgo);\r\n        //     return;\r\n\r\n        // switch (currentAlgo) {\r\n        //     case 'Bubble Sort':\r\n        //         setCurrentAlgo('Quicksort');\r\n        //         break;\r\n\r\n        //     case 'Quicksort':\r\n        //         setCurrentAlgo('Merge Sort');\r\n        //         break;\r\n\r\n        //     case 'Merge Sort':\r\n        //         setCurrentAlgo('Tim Sort');\r\n        //         break;\r\n\r\n        //     case 'Tim Sort':\r\n        //         setCurrentAlgo('Bubble Sort');\r\n        //         break;\r\n\r\n        //     default:\r\n        //         break;\r\n\r\n        if (isRunning) {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            });\r\n        } else {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Background />\r\n            <div className=\"algo-layout-container\">\r\n                <AlgoHead changeAlgoHandler={changeAlgoHandler} currentAlgo={currentAlgo} algos={algos} />\r\n                <AlgoOverview intro={currentAlgoData.intro} complexity={currentAlgoData.complexity} />\r\n                <AlgoVisualization\r\n                    algosType={algosType}\r\n                    currentAlgo={currentAlgo}\r\n                    sticksAmount={sticksAmount}\r\n                    setSticksAmount={setSticksAmount}\r\n                    sticks={sticks}\r\n                    setSticks={setSticks}\r\n                    isRunning={isRunning}\r\n                    setIsRunning={setIsRunning}\r\n                    newSticks={newSticks}\r\n                />\r\n                <AlgoExplanation explanation={currentAlgoData.explanation} />\r\n                <AlgoCode code={currentAlgoData.code} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgoLayout;\r\n","const sortingAlgorithms = [\r\n    {\r\n        name: 'Bubble Sort',\r\n        intro:\r\n            'This is one of the slowest sorting algorithms due to its simplicity. Nevertheless, it is relatively easy and quick to implement.',\r\n        explanation:\r\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.',\r\n        code: 'bubbleSort.png',\r\n        complexity: {\r\n            worstTime: 'O(n2)',\r\n            bestTime: 'O(n) ',\r\n            avgTime: 'O(n2)',\r\n            space: 'O(1) ',\r\n        },\r\n        difficulty: 'easy',\r\n    },\r\n    {\r\n        name: 'Merge Sort',\r\n        intro: 'This is an efficient, comparison-based, divide-and-conquer sorting algorithm.',\r\n        explanation:\r\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.',\r\n\r\n        code: 'mergeSort.png',\r\n        complexity: {\r\n            worstTime: 'O()',\r\n            bestTime: 'O()',\r\n            avgTime: 'O(n log(n))',\r\n            space: 'O(n)',\r\n        },\r\n        difficulty: 'middle',\r\n    },\r\n    {\r\n        name: 'Quicksort',\r\n        intro:\r\n            'This is an efficient, commonly used, divide-and-conquer algorithm, wich is averagely faster than Merge Sort.',\r\n        explanation:\r\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.',\r\n\r\n        code: 'quickSort.png',\r\n        complexity: {\r\n            worstTime: 'O(n2)',\r\n            bestTime: 'O(n log(n))',\r\n            avgTime: 'O(n log(n))',\r\n            space: 'O(log(n))',\r\n        },\r\n        difficulty: 'middle',\r\n    },\r\n    // {\r\n    //     name: 'Heapsort',\r\n    //     intro: 'thisistheintro',\r\n    //     explanation: 'thisistheexplanation',\r\n    //     code: 'thisisthecode',\r\n    //     complexity: {\r\n    //         worstTime: 'O()',\r\n    //         bestTime: 'O()',\r\n    //         avgTime: 'O()',\r\n    //         space: 'O()',\r\n    //     },\r\n    // },\r\n    {\r\n        name: 'Tim Sort',\r\n        intro: 'Deriving from Merge Sort and Insertion Sort, this is a hybrid algorithm, which is very efficient.',\r\n        explanation:\r\n            'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.',\r\n        code: 'timSort.png',\r\n        complexity: {\r\n            worstTime: 'O()',\r\n            bestTime: 'O()',\r\n            avgTime: 'O()',\r\n            space: 'O()',\r\n        },\r\n        difficulty: 'hard',\r\n    },\r\n];\r\n\r\nexport default sortingAlgorithms;\r\n","import React from 'react';\r\n\r\nimport AlgoLayout from '../components/shared/AlgoLayout/AlgoLayout';\r\nimport sortingAlgorithms from '../algo-data/sorting/sortingAlgorithmsInformaion';\r\n\r\nconst sorting = () => {\r\n    return <AlgoLayout algosType={'sorting'} algos={sortingAlgorithms} />;\r\n};\r\n\r\nexport default sorting;\r\n","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n\nimport SortingAlgos from './pages/SortingAlgos';\n\nfunction App() {\n    const routes = (\n        <Switch>\n            <Route path=\"/algorithms/sorting\" exact>\n                <SortingAlgos />\n            </Route>\n            <Route path=\"/\" exact>\n                <SortingAlgos />\n            </Route>\n            <Redirect to=\"/\" />\n        </Switch>\n    );\n\n    return (\n        <Router>\n            <Suspense fallback={<div>Loading Screen..</div>}>{routes}</Suspense>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}