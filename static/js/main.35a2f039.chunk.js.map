{"version":3,"sources":["components/shared/Background/Background.jsx","components/shared/AlgoLayout/AlgoHead.jsx","components/shared/AlgoLayout/AlgoOverview.jsx","algo-data/sorting/bubbleSort.js","algo-data/sorting/quickSort.js","algo-data/sorting/mergeSort.js","algo-data/sorting/timSort.js","components/algos-sorting/SortingVisualization.jsx","components/algos-pathfinding/Node.jsx","algo-data/pathfinding/dijkstra.js","components/algos-pathfinding/PathfindingVisualization.jsx","components/algos-sudoku/SudokuVisualization.jsx","components/shared/AlgoLayout/AlgoVisualization.jsx","components/shared/AlgoLayout/AlgoExplanation.jsx","components/shared/AlgoLayout/AlgoCode.jsx","components/shared/AlgoLayout/AlgoLayout.jsx","algo-data/sorting/sortingAlgorithmsInformation.js","algo-data/pathfinding/pathfindingAlgorithmsInformation.js","components/shared/Modal/Backdrop.jsx","components/shared/Modal/Modal.jsx","pages/Algos.jsx","App.js","reportWebVitals.js","index.js"],"names":["boxes","i","push","Background","props","moveSingleBox","target","anime","targets","id","translateX","random","translateY","easing","duration","useEffect","timeline","add","opacity","endDelay","scale","scaleX","scaleY","delay","stagger","rotateX","strokeDashoffset","setDashoffset","fill","className","map","boxNum","onClick","AlgoHead","currentAlgo","algos","otherAlgos","changeAlgoHandler","algosType","changeAlgosTypeHandler","useState","showSelection","setShowSelection","onSelectHandler","e","onMouseEnter","onMouseLeave","src","process","alt","a","name","type","difficulty","window","location","reload","AlgoOverview","intro","complexity","showComplexity","setShowComplexity","onMouseOver","worstTime","bestTime","avgTime","space","bubbleSort","exit","array","stickWidth","speed","addColor","sleep","moveStickTo","removeColor","finished","length","j","oldJ","document","getElementsByClassName","err","quickSort","high","partition","low","pivot","console","log","qs","partitionIndex","mergeSort","arr","ms","mid","Math","floor","leftHalf","slice","rightHalf","k","elementAtK","getElementById","style","height","classList","doc","parseFloat","timSort","calcMinRun","n","r","insertionSort","left","right","merge","l","m","len1","len2","minRun","start","end","min","size","ts","milliseconds","Promise","resolve","setTimeout","SortingVisualization","algo","sticksAmount","setSticksAmount","sticks","setSticks","isRunning","setIsRunning","newSticks","setSpeed","stick","move","presetButtonHandler","amount","ElementClassName","addClassName","remove","startButtonHandler","index","width","viewBox","xmlns","d","stroke","htmlFor","onChange","value","max","Node","row","col","isStart","isEnd","isVisited","isWall","drawingMode","drawingHandler","drawingHandlerClick","dijkstraAlgorithm","grid","startNode","endNode","checkIfRunning","dijkstra","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","prevNode","neighbors","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","PathfindingVisualization","boxesAmount","setBoxesAmount","setBoxes","newBoxes","updateGrid","setDrawingMode","resetGrid","mouseIsPressed","event","error","split","parseInt","changeDrawingModeHandler","position","startingNode","endingNode","SudokuVisualization","AlgoVisualization","AlgoExplanation","explanation","AlgoCode","code","isIn","num","output","forEach","numberOfSticks","stickHeight","round","AlgoLayout","currentAlgoData","setCurrentAlgo","setStartNode","setEndNode","setMouseIsPressed","newNode","newGrid","rows","cols","isReset","currentRow","setGrid","onMouseDown","onMouseUp","newAlgo","toString","updateNode","backgroundColor","marginTop","display","alignItems","justifyContent","Date","now","getFullYear","sortingAlgorithms","pathfindingAlgorithmsInformation","Backdrop","ReactDOM","createPortal","ModalOverlay","content","onSubmit","preventDefault","footerClass","onCancel","Modal","Fragment","show","Algos","firstVisit","setFirstVisit","setAlgosType","pathfindingAlgorithms","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.35a2f039.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { anime } from 'react-anime';\r\n\r\nconst boxes = [];\r\nconst boxesAmount = 50;\r\n\r\nfor (let i = 0; i < boxesAmount; i++) {\r\n    boxes.push(i);\r\n}\r\n\r\nconst Background = (props) => {\r\n    const moveSingleBox = ({ target }) => {\r\n        anime({\r\n            targets: `.${target.id}`,\r\n            translateX: () => anime.random(-800, 800),\r\n            translateY: () => anime.random(-300, -900),\r\n            easing: 'linear',\r\n            duration: 1500,\r\n        });\r\n    };\r\n\r\n    const backgroundAnimation = () => {\r\n        const timeline = anime.timeline();\r\n        timeline\r\n            .add({\r\n                targets: '.wrapper',\r\n                opacity: [0, 1],\r\n                duration: 100,\r\n                endDelay: 500,\r\n            })\r\n            .add({\r\n                targets: '', ////////////////////////////////////////////// CLASSES !!!!!!!!!!\r\n                scale: [0.5, 1],\r\n                easing: 'spring(1, 100, 10, 10)',\r\n                duration: 1000,\r\n            })\r\n            .add(\r\n                {\r\n                    targets: '.block',\r\n                    opacity: 1,\r\n                    translateX: () => anime.random(-800, 800),\r\n                    translateY: () => anime.random(500, 3000),\r\n                    scaleX: () => anime.random(1, 2),\r\n                    scaleY: () => anime.random(1, 5),\r\n                    easing: 'linear',\r\n                    duration: 1500,\r\n                    delay: anime.stagger(5),\r\n                },\r\n                '-=1500'\r\n            )\r\n            .add(\r\n                {\r\n                    targets: '.Home_main__1x8gC',\r\n                    opacity: [0, 1],\r\n                    rotateX: [-90, 0],\r\n                    duration: 1000,\r\n                    easing: 'linear',\r\n                },\r\n                '-=1500'\r\n            )\r\n            .add(\r\n                {\r\n                    targets: '.main-header',\r\n                    rotateX: [-90, 0],\r\n                    duration: 1000,\r\n                    easing: 'linear',\r\n                },\r\n                '-=1000'\r\n            )\r\n            .add(\r\n                {\r\n                    targets: ['.main-navigation-logo-img', '.Home_title_logo_img__1gmXd'],\r\n                    translateX: [-50, 0],\r\n                    opacity: [0, 1],\r\n                    duration: 300,\r\n                    easing: 'easeInOutQuad',\r\n                },\r\n                '-=300'\r\n            )\r\n            .add({\r\n                targets: '.Home_title_logo_img__1gmXd path',\r\n                strokeDashoffset: [anime.setDashoffset, 0],\r\n                easing: 'easeInOutSine',\r\n                duration: 1000,\r\n            })\r\n            .add(\r\n                {\r\n                    targets: '.Home_title_logo_img__1gmXd path',\r\n                    fill: 'rgba(0, 255, 234, 1)',\r\n                    easing: 'linear',\r\n                    duration: 1000,\r\n                },\r\n                '-=500'\r\n            );\r\n    };\r\n\r\n    useEffect(() => backgroundAnimation(), []);\r\n\r\n    return (\r\n        <div className=\"background-container\">\r\n            {boxes.map((boxNum) => (\r\n                <div key={`box-${boxNum}`} className={`block box-${boxNum}`} id={`box-${boxNum}`} onClick={moveSingleBox}></div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Background;\r\n","import React, { useState } from 'react';\r\n\r\nimport './AlgoHead.css';\r\n\r\nconst AlgoHead = ({ currentAlgo, algos, otherAlgos, changeAlgoHandler, algosType, changeAlgosTypeHandler }) => {\r\n    const [showSelection, setShowSelection] = useState(false);\r\n\r\n    const onSelectHandler = (e) => {\r\n        changeAlgosTypeHandler(e.target.className);\r\n        changeAlgoHandler(e.target.id);\r\n        setShowSelection(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"algo-head-container\">\r\n            <div onMouseEnter={() => setShowSelection(true)} onMouseLeave={() => setShowSelection(false)}>\r\n                <h1>\r\n                    {`${currentAlgo} `}\r\n                    <img className=\"dropdown-arrow\" src={process.env.PUBLIC_URL + '/dropdownArrow.png'} alt=\"\" />\r\n                </h1>\r\n                {showSelection && (\r\n                    <div className=\"algo-selection\">\r\n                        <div>\r\n                            <h3>{algosType} Algorithms:</h3>\r\n                            {algos.map((a) => {\r\n                                return (\r\n                                    <h2 onClick={onSelectHandler} id={a.name} className={a.type} key={a.name}>\r\n                                        {`${a.name} ${a.difficulty ? '(' + a.difficulty + ')' : ''}`}\r\n                                    </h2>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        <div>\r\n                            <h3>{otherAlgos[0].type} Algorithms:</h3>\r\n                            {otherAlgos.map((a) => {\r\n                                return (\r\n                                    <h2 onClick={onSelectHandler} id={a.name} className={a.type} key={a.name}>\r\n                                        {`${a.name} ${a.difficulty ? '(' + a.difficulty + ')' : ''}`}\r\n                                    </h2>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <p className=\"help\" onClick={() => window.location.reload()}>\r\n                ?\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgoHead;\r\n","import React, { useState } from 'react';\r\n\r\nimport './AlgoOverview.css';\r\n\r\nconst AlgoOverview = ({ intro, complexity }) => {\r\n    const [showComplexity, setShowComplexity] = useState(false);\r\n\r\n    const mouseOverHandler = () => {\r\n        setShowComplexity(true);\r\n    };\r\n\r\n    const mouseDownHandler = () => {\r\n        setShowComplexity(false);\r\n    };\r\n    return (\r\n        <div className=\"algo-overview\">\r\n            <div className=\"intro-container\">\r\n                <p>{intro}</p>\r\n            </div>\r\n            {complexity && (\r\n                <div onMouseOver={mouseOverHandler} onMouseLeave={mouseDownHandler} className=\"complexity-container\">\r\n                    {!showComplexity && <h3>Time & Space Complexity</h3>}\r\n                    {showComplexity && (\r\n                        <div className=\"complexity-box\">\r\n                            <h4>Worst Case Time Complexity: {complexity.worstTime}</h4>\r\n                            <h4>Best Case Time Complexity: {complexity.bestTime}</h4>\r\n                            <h4>Average Case Time Complexity: {complexity.avgTime}</h4>\r\n                            <h4>Space Complexity: {complexity.space}</h4>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgoOverview;\r\n","const bubbleSort = async (exit, array, stickWidth, speed, addColor, sleep, moveStickTo, removeColor) => {\r\n    try {\r\n        // BUBBLE SORT\r\n        let finished = false;\r\n        for (let i = 0; i < array.length - 1; i++) {\r\n            //////// maybe implement while loop to pause and save i.\r\n            finished = true;\r\n            if (exit) break;\r\n            for (let j = 0; j < array.length - 1; j++) {\r\n                exit = !exit ? addColor(`stick-${j}`) : null;\r\n                exit = !exit ? addColor(`stick-${j + 1}`) : null;\r\n\r\n                // sleeping time represents the comparison\r\n                await sleep(500 / speed);\r\n                if (array[j] > array[j + 1]) {\r\n                    finished = false;\r\n                    // swap visually\r\n                    moveStickTo(`.stick-${j}`, 2 * stickWidth * (j + 1));\r\n                    moveStickTo(`.stick-${j + 1}`, 2 * stickWidth * j);\r\n                    await sleep(1001 / speed);\r\n\r\n                    // swap in code\r\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n\r\n                    // swap classes\r\n                    try {\r\n                        let oldJ = document.getElementsByClassName(`stick-${j}`)[0];\r\n                        document.getElementsByClassName(`stick-${j + 1}`)[0].className = `stick-${j}`;\r\n                        oldJ.className = `stick-${j + 1}`;\r\n                    } catch (err) {\r\n                        exit = true;\r\n                    }\r\n                }\r\n                exit = !exit ? removeColor(`stick-${j}`) : null;\r\n                exit = !exit ? removeColor(`stick-${j + 1}`) : null;\r\n                if (exit) break;\r\n            }\r\n            if (finished) return;\r\n        }\r\n    } catch (error) {\r\n        return;\r\n    }\r\n};\r\n\r\nexport default bubbleSort;\r\n\r\n// const bubbleSort = (array) => {\r\n//     let finished = false;\r\n//     for (let i = 0; i < array.length - 1; i++) {\r\n//         finished = true;\r\n//         for (let j = 0; j < array.length - 1; j++) {\r\n//             if (array[j] > array[j + 1]) {\r\n//                 [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n//                 finished = false\r\n//             }\r\n\r\n//         }\r\n//         if (finished) return;\r\n//     }\r\n// };\r\n\r\n// bubbleSort();\r\n","const quickSort = async (array, high, stickWidth, speed, addColor, sleep, moveStickTo) => {\r\n    try {\r\n        const partition = async (array, low, high) => {\r\n            let i = low - 1;\r\n            let pivot = array[high];\r\n            if (addColor(`stick-${high}`, 'red')) return;\r\n            for (let j = low; j < high; j++) {\r\n                if (array[j] <= pivot) {\r\n                    i++;\r\n                    // swap visually\r\n                    moveStickTo(`.stick-${j}`, 2 * stickWidth * i);\r\n                    moveStickTo(`.stick-${i}`, 2 * stickWidth * j);\r\n                    await sleep(1001 / speed);\r\n\r\n                    // swap in code\r\n                    [array[j], array[i]] = [array[i], array[j]];\r\n\r\n                    // swap classes\r\n                    try {\r\n                        let oldJ = document.getElementsByClassName(`stick-${j}`)[0];\r\n                        document.getElementsByClassName(`stick-${i}`)[0].className = `stick-${j}`;\r\n                        oldJ.className = `stick-${i}`;\r\n                    } catch (err) {\r\n                        // exit = true;\r\n                    }\r\n                    if (addColor(`stick-${i}`, 'light-grey')) return;\r\n                }\r\n                if (addColor(`stick-${j}`)) return;\r\n                await sleep(1001 / speed);\r\n            }\r\n\r\n            // swap visually\r\n            moveStickTo(`.stick-${high}`, 2 * stickWidth * (i + 1));\r\n            moveStickTo(`.stick-${i + 1}`, 2 * stickWidth * high);\r\n            await sleep(1001 / speed);\r\n\r\n            // swap in code\r\n            [array[i + 1], array[high]] = [array[high], array[i + 1]];\r\n\r\n            // swap classes\r\n            try {\r\n                let oldJ = document.getElementsByClassName(`stick-${high}`)[0];\r\n                document.getElementsByClassName(`stick-${i + 1}`)[0].className = `stick-${high}`;\r\n                oldJ.className = `stick-${i + 1}`;\r\n            } catch (err) {\r\n                // exit = true;\r\n            }\r\n\r\n            //  reset all colors\r\n            try {\r\n                for (let i = 0; i < array.length; i++)\r\n                    document.getElementsByClassName(`stick-${i}`)[0].className = `stick-${i}`;\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n            return i + 1;\r\n        };\r\n        const qs = async (array, low, high) => {\r\n            if (array.length === 1) return array;\r\n            if (low < high) {\r\n                const partitionIndex = await partition(array, low, high);\r\n\r\n                await qs(array, low, partitionIndex - 1);\r\n                await qs(array, partitionIndex, high);\r\n            }\r\n        };\r\n        await qs(array, 0, high);\r\n    } catch (error) {\r\n        return;\r\n    }\r\n};\r\n\r\nexport default quickSort;\r\n\r\n// const partition = (array, low, high) => {\r\n//     let i = low - 1;\r\n//     let pivot = array[high];\r\n//     for (let j = low; j < high; j++) {\r\n//         if (array[j] <= pivot) {\r\n//             i++;\r\n//             [array[i], array[j]] = [array[j], array[i]];\r\n//         }\r\n//     }\r\n//     [array[i + 1], array[high]] = [array[high], array[i + 1]];\r\n//     return i + 1;\r\n// };\r\n// const qs = async (array, low, high) => {\r\n//     if (array.length === 1) return array;\r\n//     if (low < high) {\r\n//         const partitionIndex = partition(array, low, high);\r\n\r\n//         qs(array, low, partitionIndex - 1);\r\n//         qs(array, partitionIndex, high);\r\n//     }\r\n// };\r\n\r\n// let a = [3, 4, 1, 9, 2, 3, 0, 1];\r\n\r\n// qs(a, 7).then(() => console.log(a));\r\n","const mergeSort = async (arr, stickWidth, speed, addColor, sleep, removeColor, moveStickTo) => {\r\n    const ms = async (array) => {\r\n        if (array.length > 1) {\r\n            const mid = Math.floor(array.length / 2);\r\n            const leftHalf = array.slice(0, mid);\r\n            const rightHalf = array.slice(mid);\r\n\r\n            await ms(leftHalf);\r\n            await ms(rightHalf);\r\n\r\n            let i, j, k;\r\n            i = j = k = 0;\r\n            while (i < leftHalf.length && j < rightHalf.length) {\r\n                if (leftHalf[i] < rightHalf[j]) {\r\n                    try {\r\n                        const elementAtK = document.getElementById(`stick-${array[k]}`);\r\n                        elementAtK.style.height = `${leftHalf[i]}%`;\r\n                        addColor(elementAtK.classList[0]);\r\n\r\n                        await sleep(1001 / speed);\r\n                        removeColor(elementAtK.classList[0]);\r\n                    } catch (error) {\r\n                        return;\r\n                    }\r\n\r\n                    array[k] = leftHalf[i];\r\n                    i++;\r\n                } else {\r\n                    try {\r\n                        const elementAtK = document.getElementById(`stick-${array[k]}`);\r\n                        elementAtK.style.height = `${rightHalf[j]}%`;\r\n                        addColor(elementAtK.classList[0]);\r\n\r\n                        await sleep(1001 / speed);\r\n                        removeColor(elementAtK.classList[0]);\r\n                    } catch (error) {\r\n                        return;\r\n                    }\r\n\r\n                    array[k] = rightHalf[j];\r\n                    j++;\r\n                }\r\n                k++;\r\n            }\r\n            while (i < leftHalf.length) {\r\n                try {\r\n                    const elementAtK = document.getElementById(`stick-${array[k]}`);\r\n                    elementAtK.style.height = `${leftHalf[i]}%`;\r\n                    addColor(elementAtK.classList[0]);\r\n\r\n                    await sleep(1001 / speed);\r\n                    removeColor(elementAtK.classList[0]);\r\n                } catch (error) {\r\n                    return;\r\n                }\r\n\r\n                array[k] = leftHalf[i];\r\n                i++;\r\n                k++;\r\n            }\r\n            while (j < rightHalf.length) {\r\n                try {\r\n                    const elementAtK = document.getElementById(`stick-${array[k]}`);\r\n                    elementAtK.style.height = `${rightHalf[j]}%`;\r\n                    addColor(elementAtK.classList[0]);\r\n\r\n                    await sleep(1001 / speed);\r\n                    removeColor(elementAtK.classList[0]);\r\n                } catch (error) {\r\n                    return;\r\n                }\r\n\r\n                array[k] = rightHalf[j];\r\n                j++;\r\n                k++;\r\n            }\r\n        }\r\n    };\r\n    await ms(arr);\r\n    // resetting ids\r\n    for (let i = 0; i < arr.length; i++) {\r\n        try {\r\n            document.getElementsByClassName(`stick-${i}`)[0].id = '';\r\n        } catch (error) {\r\n            return;\r\n        }\r\n    }\r\n    for (let i = 0; i < arr.length; i++) {\r\n        try {\r\n            const doc = document.getElementsByClassName(`stick-${i}`)[0];\r\n            doc.id = `stick-${parseFloat(doc.style.height)}`;\r\n        } catch (error) {\r\n            return;\r\n        }\r\n    }\r\n};\r\nexport default mergeSort;\r\n\r\n// const mergeSort = async (array) => {\r\n//     if (array.length > 1) {\r\n//         const mid = Math.floor(array.length / 2);\r\n//         const leftHalf = array.slice(0, mid);\r\n//         const rightHalf = array.slice(mid);\r\n\r\n//         mergeSort(leftHalf);\r\n//         mergeSort(rightHalf);\r\n\r\n//         let i, j, k;\r\n//         i = j = k = 0;\r\n//         while (i < leftHalf.length && j < rightHalf.length) {\r\n//             if (leftHalf[i] < rightHalf[j]) {\r\n//                 array[k] = leftHalf[i];\r\n//                 i++;\r\n//             } else {\r\n//                 array[k] = rightHalf[j];\r\n//                 j++;\r\n//             }\r\n//             k++;\r\n//         }\r\n//         while (i < leftHalf.length) {\r\n//             array[k] = leftHalf[i];\r\n//             i++;\r\n//             k++;\r\n//         }\r\n//         while (j < rightHalf.length) {\r\n//             array[k] = rightHalf[j];\r\n//             j++;\r\n//             k++;\r\n//         }\r\n//     }\r\n// };\r\n\r\n// let a = [3, 4, 1, 9, 2, 3, 0, 1];\r\n\r\n// mergeSort(a, 7).then(() => console.log(a));\r\n","const timSort = async (array, stickWidth, speed, addColor, sleep, removeColor, moveStickTo) => {\r\n    const minMerge = 32;\r\n\r\n    const calcMinRun = (n) => {\r\n        let r = 0;\r\n        while (n >= minMerge) {\r\n            r = r | (n & 1);\r\n            n >>= 1;\r\n        }\r\n        return n + r;\r\n    };\r\n\r\n    const insertionSort = async (arr, left, right) => {\r\n        for (let i = left + 1; i < right + 1; i++) {\r\n            let j = i;\r\n\r\n            while (j > left && arr[j] < arr[j - 1]) {\r\n                //////////////////////////////////// SWAP !!!!!!!!!!!!!!!!!\r\n                moveStickTo(`.stick-${j}`, 2 * stickWidth * (j - 1));\r\n                moveStickTo(`.stick-${j - 1}`, 2 * stickWidth * j);\r\n                await sleep(1001 / speed);\r\n\r\n                [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]];\r\n\r\n                try {\r\n                    let oldJ = document.getElementsByClassName(`stick-${j}`)[0];\r\n                    document.getElementsByClassName(`stick-${j - 1}`)[0].className = `stick-${j}`;\r\n                    oldJ.className = `stick-${j - 1}`;\r\n                } catch (error) {\r\n                    return;\r\n                }\r\n\r\n                j--;\r\n            }\r\n        }\r\n    };\r\n\r\n    const merge = async (arr, l, m, r) => {\r\n        const [len1, len2] = [m - l + 1, r - m];\r\n        const [left, right] = [[], []];\r\n\r\n        for (let i = 0; i < len1; i++) {\r\n            left.push(arr[l + i]);\r\n        }\r\n        for (let i = 0; i < len2; i++) {\r\n            right.push(arr[m + 1 + i]);\r\n        }\r\n\r\n        let i, j, k;\r\n        i = j = 0;\r\n        k = l;\r\n\r\n        while (i < len1 && j < len2) {\r\n            if (left[i] <= right[j]) {\r\n                try {\r\n                    const elementAtK = document.getElementById(`stick-${arr[k]}`);\r\n                    elementAtK.style.height = `${left[i]}%`;\r\n                } catch (error) {\r\n                    return;\r\n                }\r\n\r\n                await sleep(10001 / speed);\r\n                arr[k] = left[i];\r\n                i++;\r\n            } else {\r\n                try {\r\n                    const elementAtK = document.getElementById(`stick-${arr[k]}`);\r\n                    elementAtK.style.height = `${right[j]}%`;\r\n                } catch (error) {\r\n                    return;\r\n                }\r\n\r\n                await sleep(10001 / speed);\r\n                arr[k] = right[j];\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < len1) {\r\n            try {\r\n                const elementAtK = document.getElementById(`stick-${arr[k]}`);\r\n                elementAtK.style.height = `${left[i]}%`;\r\n            } catch (error) {\r\n                return;\r\n            }\r\n\r\n            await sleep(10001 / speed);\r\n            arr[k] = left[i];\r\n            k++;\r\n            i++;\r\n        }\r\n        while (j < len2) {\r\n            try {\r\n                const elementAtK = document.getElementById(`stick-${arr[k]}`);\r\n                elementAtK.style.height = `${right[j]}%`;\r\n            } catch (error) {\r\n                return;\r\n            }\r\n\r\n            await sleep(10001 / speed);\r\n            arr[k] = right[j];\r\n            k++;\r\n            j++;\r\n        }\r\n\r\n        // resetting ids\r\n        for (let i = 0; i < arr.length; i++) {\r\n            try {\r\n                document.getElementsByClassName(`stick-${i}`)[0].id = '';\r\n            } catch (error) {\r\n                return;\r\n            }\r\n        }\r\n        for (let i = 0; i < arr.length; i++) {\r\n            try {\r\n                const doc = document.getElementsByClassName(`stick-${i}`)[0];\r\n                doc.id = `stick-${parseFloat(doc.style.height)}`;\r\n            } catch (error) {\r\n                return;\r\n            }\r\n        }\r\n    };\r\n\r\n    const ts = async (arr) => {\r\n        const n = arr.length;\r\n        const minRun = calcMinRun(n);\r\n\r\n        for (let start = 0; start < n; start += minRun) {\r\n            const end = Math.min(start + minRun - 1, n - 1);\r\n            await insertionSort(arr, start, end);\r\n        }\r\n\r\n        console.log('now ms');\r\n\r\n        let size = minRun;\r\n        while (size < n) {\r\n            for (let left = 0; left < n; left = left + size * 2) {\r\n                const mid = Math.min(n - 1, left + size - 1);\r\n                const right = Math.min(left + 2 * size - 1, n - 1);\r\n\r\n                if (mid < right) await merge(arr, left, mid, right);\r\n            }\r\n            size = size * 2;\r\n        }\r\n    };\r\n    ts(array);\r\n};\r\n\r\nexport default timSort;\r\n\r\n// const timSort = async (array) => {\r\n//     const minMerge = 64;\r\n\r\n//     const calcMinRun = (n) => {\r\n//         let r = 0;\r\n//         while (n >= minMerge) {\r\n//             r = r | (n & 1);\r\n//             n >>= 1;\r\n//         }\r\n//         return n + r;\r\n//     };\r\n\r\n//     const insertionSort = (arr, left, right) => {\r\n//         for (let i = left + 1; i < right + 1; i++) {\r\n//             let j = i;\r\n\r\n//             while (j > left && arr[j] < arr[j - 1]) {\r\n//                 //////////////////////////////////// SWAP !!!!!!!!!!!!!!!!!\r\n//                 [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]];\r\n//                 j--;\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const merge = (arr, l, m, r) => {\r\n//         const [len1, len2] = [m - l + 1, r - m];\r\n//         const [left, right] = [[], []];\r\n\r\n//         for (let i = 0; i < len1; i++) {\r\n//             left.push(arr[l + i]);\r\n//         }\r\n//         for (let i = 0; i < len2; i++) {\r\n//             right.push(arr[m + 1 + i]);\r\n//         }\r\n\r\n//         let i, j, k;\r\n//         i = j = 0;\r\n//         k = l;\r\n\r\n//         while (i < len1 && j < len2) {\r\n//             if (left[i] <= right[j]) {\r\n//                 arr[k] = left[i];\r\n//                 i++;\r\n//             } else {\r\n//                 arr[k] = right[j];\r\n//                 j++;\r\n//             }\r\n//             k++;\r\n//         }\r\n\r\n//         while (i < len1) {\r\n//             arr[k] = left[i];\r\n//             k++;\r\n//             i++;\r\n//         }\r\n//         while (j < len2) {\r\n//             arr[k] = right[j];\r\n//             k++;\r\n//             j++;\r\n//         }\r\n//     };\r\n\r\n//     const ts = async (arr) => {\r\n//         const n = arr.length;\r\n//         const minRun = calcMinRun(n);\r\n\r\n//         for (let start = 0; start < n; start += minRun) {\r\n//             const end = Math.min(start + minRun - 1, n - 1);\r\n//             insertionSort(arr, start, end);\r\n//         }\r\n\r\n//         let size = minRun;\r\n//         while (size < n) {\r\n//             for (let left = 0; left < n; left = left + size * 2) {\r\n//                 const mid = Math.min(n - 1, left + size - 1);\r\n//                 const right = Math.min(left + 2 * size - 1, n - 1);\r\n\r\n//                 if (mid < right) merge(arr, left, mid, right);\r\n//             }\r\n//             size = size * 2;\r\n//         }\r\n//     };\r\n//     ts(array);\r\n// };\r\n\r\n// let a = [\r\n//     -2,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n//     7,\r\n//     15,\r\n//     -14,\r\n//     0,\r\n//     15,\r\n//     0,\r\n//     7,\r\n//     -7,\r\n//     -4,\r\n//     -13,\r\n//     5,\r\n//     8,\r\n//     -14,\r\n//     12,\r\n// ];\r\n// timSort(a).then(() => console.log(a));\r\n","import React from 'react';\r\nimport { anime } from 'react-anime';\r\n\r\nimport bubbleSort from '../../algo-data/sorting/bubbleSort';\r\nimport quickSort from '../../algo-data/sorting/quickSort';\r\nimport mergeSort from '../../algo-data/sorting/mergeSort';\r\nimport timSort from '../../algo-data/sorting/timSort';\r\n\r\nimport './SortingVisualization.css';\r\n\r\nconst sleep = (milliseconds) => {\r\n    if (milliseconds <= 1) return;\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n};\r\n\r\nconst SortingVisualization = ({\r\n    algo,\r\n    sticksAmount,\r\n    setSticksAmount,\r\n    sticks,\r\n    setSticks,\r\n    isRunning,\r\n    setIsRunning,\r\n    newSticks,\r\n    speed,\r\n    setSpeed,\r\n}) => {\r\n    const sectionWidth = 1200;\r\n    const stickWidth = sectionWidth / (sticks.length * 2 - 1);\r\n\r\n    const moveStickTo = async (stick, move) => {\r\n        anime({\r\n            targets: `${stick}`,\r\n            left: `${move}`,\r\n            easing: 'linear',\r\n            duration: 1001 / speed,\r\n        });\r\n        // document.getElementsByClassName(`stick-${stick}`)[0].style.left = `${move}px`;\r\n    };\r\n\r\n    const speedChangeHandler = (e) => {\r\n        if (isRunning) {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            }, 2000);\r\n        } else {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            }, 2000);\r\n        }\r\n        setSpeed(e.target.value);\r\n    };\r\n\r\n    const amountChangeHandler = (e) => {\r\n        setSticksAmount(e.target.value);\r\n        if (isRunning) {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(e.target.value));\r\n            }, 2000 / speed);\r\n        } else {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(e.target.value));\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    const spawnButtonHandler = () => {\r\n        if (isRunning) {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(\r\n                () => {\r\n                    setSticks(newSticks(sticksAmount));\r\n                },\r\n                2000 / speed < 500 ? 500 : 2000 / speed\r\n            );\r\n        } else {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    const presetButtonHandler = (speed, amount) => {\r\n        setSticksAmount(amount);\r\n\r\n        setIsRunning(false);\r\n        setSticks(false);\r\n        setTimeout(\r\n            () => {\r\n                setSticks(newSticks(amount));\r\n            },\r\n            2000 / speed < 500 ? 500 : 2000 / speed\r\n        );\r\n        setSpeed(speed);\r\n    };\r\n\r\n    const addColor = (ElementClassName, addClassName = 'grey') => {\r\n        try {\r\n            document.getElementsByClassName(ElementClassName)[0].classList.add(addClassName);\r\n        } catch (err) {\r\n            console.log(err);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const removeColor = (ElementClassName, addClassName = 'grey') => {\r\n        try {\r\n            document.getElementsByClassName(ElementClassName)[0].classList.remove(addClassName);\r\n        } catch (err) {\r\n            console.log(err);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const startButtonHandler = async () => {\r\n        if (isRunning) return;\r\n        let exit = false;\r\n        setIsRunning(true);\r\n\r\n        switch (algo) {\r\n            case 'Bubble Sort':\r\n                bubbleSort(exit, sticks, stickWidth, speed, addColor, sleep, moveStickTo, removeColor);\r\n                break;\r\n\r\n            case 'Quicksort':\r\n                quickSort(sticks, sticks.length - 1, stickWidth, speed, addColor, sleep, moveStickTo);\r\n                break;\r\n\r\n            case 'Merge Sort':\r\n                mergeSort(sticks, stickWidth, speed, addColor, sleep, removeColor, moveStickTo);\r\n                break;\r\n\r\n            case 'Tim Sort':\r\n                timSort(sticks, stickWidth, speed, addColor, sleep, removeColor, moveStickTo);\r\n                break;\r\n\r\n            default:\r\n                bubbleSort(exit, sticks, stickWidth, speed, addColor, sleep, moveStickTo, removeColor);\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"sorting-container\">\r\n            <div className=\"sticks-container\">\r\n                {!sticks && <div className=\"loading\"></div>}\r\n                {sticks &&\r\n                    sticks.map((l, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className={`stick-${index} stick`}\r\n                            id={`stick-${l}`}\r\n                            style={{\r\n                                height: `${l}%`,\r\n                                width: `${stickWidth}px`,\r\n                                left: `${index * stickWidth * 2}px`,\r\n                            }}\r\n                        ></div>\r\n                    ))}\r\n            </div>\r\n            <div className=\"settings\">\r\n                <div className=\"settings-left\">\r\n                    <svg\r\n                        onClick={startButtonHandler}\r\n                        className=\"start-btn\"\r\n                        viewBox=\"0 0 70 80\"\r\n                        fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            d=\"M67.5001 35.67C70.8334 37.5945 70.8334 42.4057 67.5001 44.3302L7.50005 78.9712C4.16672 80.8957 5.34058e-05 78.4901 5.34058e-05 74.6411L5.34058e-05 5.35909C5.34058e-05 1.51008 4.16672 -0.895545 7.50005 1.02896L67.5001 35.67Z\"\r\n                            fill=\"white\"\r\n                            stroke=\"white\"\r\n                        />\r\n                    </svg>\r\n                    <img\r\n                        onClick={spawnButtonHandler}\r\n                        className=\"spawn-btn\"\r\n                        src={process.env.PUBLIC_URL + '/reload.png'}\r\n                        alt=\"reload\"\r\n                    />\r\n                </div>\r\n                <div className=\"settings-right\">\r\n                    <div className=\"presets\">\r\n                        <h3>Presets</h3>\r\n                        <button onClick={() => presetButtonHandler(1, 20)}>VERY SLOW</button>\r\n                        <br />\r\n                        <button onClick={() => presetButtonHandler(100, 50)}>SLOW</button>\r\n                        <br />\r\n                        <button onClick={() => presetButtonHandler(1000, 200)}>FAST</button>\r\n                    </div>\r\n                    <div className=\"custom\">\r\n                        <h3>Custom</h3>\r\n                        <label htmlFor=\"speed\">{`Speed: ${speed}`}</label>\r\n                        <br />\r\n                        <input\r\n                            name=\"speed\"\r\n                            onChange={speedChangeHandler}\r\n                            min={1}\r\n                            max={1000}\r\n                            value={speed}\r\n                            type=\"range\"\r\n                        />\r\n                        <br />\r\n                        <label htmlFor=\"amount\">{`Amount: ${sticksAmount}`}</label>\r\n                        <br />\r\n                        <input\r\n                            name=\"amount\"\r\n                            onChange={amountChangeHandler}\r\n                            min={5}\r\n                            max={200}\r\n                            value={sticksAmount}\r\n                            type=\"range\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortingVisualization;\r\n","import React from 'react';\r\n\r\nimport './Node.css';\r\n\r\nconst Node = ({ row, col, isStart, isEnd, isVisited, isWall, drawingMode, drawingHandler, drawingHandlerClick }) => {\r\n    return (\r\n        <div\r\n            className={`box ${isStart ? ' starting-node' : ''}${isEnd ? ' ending-node' : ''}${\r\n                isVisited ? ' visited-node' : ''\r\n            }${isWall ? ' wall-node' : ''}`}\r\n            row={row}\r\n            col={col}\r\n            id={`box-${row}-${col}`}\r\n            onMouseEnter={(drawingMode === 'wall') | (drawingMode === 'erase') ? drawingHandler : null}\r\n            onClick={drawingHandlerClick}\r\n        ></div>\r\n    );\r\n};\r\nexport default Node;\r\n","const dijkstraAlgorithm = async (grid, startNode, endNode, sleep, checkIfRunning) => {\r\n    const dijkstra = async (grid, startNode, endNode, sleep) => {\r\n        const visitedNodesInOrder = [];\r\n        startNode.distance = 0;\r\n        const unvisitedNodes = getAllNodes(grid);\r\n        while (!!unvisitedNodes.length) {\r\n            if (!checkIfRunning()) return false;\r\n            sortNodesByDistance(unvisitedNodes);\r\n            const closestNode = unvisitedNodes.shift();\r\n            if (closestNode.isWall) continue;\r\n            if (closestNode.distance === Infinity) return false;\r\n            closestNode.isVisited = true;\r\n            try {\r\n                document.getElementById(`box-${closestNode.row}-${closestNode.col}`).classList.add('visited-node');\r\n                await sleep(5);\r\n            } catch (error) {}\r\n            visitedNodesInOrder.push(closestNode);\r\n            if (closestNode === endNode) return visitedNodesInOrder;\r\n            updateUnvisitedNeighbors(closestNode, grid);\r\n        }\r\n    };\r\n\r\n    const sortNodesByDistance = (unvisitedNodes) => {\r\n        unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    };\r\n\r\n    const updateUnvisitedNeighbors = (node, grid) => {\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            neighbor.distance = node.distance + 1;\r\n            neighbor.prevNode = node;\r\n        }\r\n    };\r\n\r\n    const getUnvisitedNeighbors = (node, grid) => {\r\n        const neighbors = [];\r\n        const { row, col } = node;\r\n        if (row > 0) neighbors.push(grid[row - 1][col]);\r\n        if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n        if (col > 0) neighbors.push(grid[row][col - 1]);\r\n        if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n        return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n    };\r\n\r\n    const getAllNodes = (grid) => {\r\n        const nodes = [];\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                nodes.push(node);\r\n            }\r\n        }\r\n        return nodes;\r\n    };\r\n\r\n    const getNodesInShortestPathOrder = async (endNode) => {\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = endNode;\r\n        console.log(currentNode);\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n            currentNode = currentNode.prevNode;\r\n        }\r\n\r\n        for (const node of nodesInShortestPathOrder) {\r\n            try {\r\n                document.getElementById(`box-${node.row}-${node.col}`).classList.add('shortest-path');\r\n                await sleep(50);\r\n            } catch (error) {}\r\n        }\r\n    };\r\n\r\n    if (!(await dijkstra(grid, startNode, endNode, sleep))) return;\r\n    await getNodesInShortestPathOrder(endNode);\r\n};\r\nexport default dijkstraAlgorithm;\r\n","import React from 'react';\r\n\r\nimport Node from './Node';\r\nimport dijkstraAlgorithm from '../../algo-data/pathfinding/dijkstra';\r\n\r\nimport './PathfindingVisualization.css';\r\n\r\nconst sleep = (milliseconds) => {\r\n    if (milliseconds <= 1) return;\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n};\r\n\r\nconst PathfindingVisualization = ({\r\n    algo,\r\n    boxesAmount,\r\n    setBoxesAmount,\r\n    boxes,\r\n    setBoxes,\r\n    isRunning,\r\n    setIsRunning,\r\n    newBoxes,\r\n    speed,\r\n    setSpeed,\r\n    grid,\r\n    updateGrid,\r\n    drawingMode,\r\n    setDrawingMode,\r\n    startNode,\r\n    endNode,\r\n    resetGrid,\r\n    mouseIsPressed,\r\n}) => {\r\n    const drawingHandler = (event) => {\r\n        try {\r\n            if (document.getElementById('isRunning').classList.value === 'true') return;\r\n        } catch (error) {}\r\n        if (!mouseIsPressed) return;\r\n        const id = event.target.id;\r\n        const [, row, col] = id.split('-');\r\n\r\n        updateGrid(row, col);\r\n    };\r\n\r\n    const drawingHandlerClick = (event) => {\r\n        try {\r\n            if (document.getElementById('isRunning').classList.value === 'true') return;\r\n        } catch (error) {}\r\n        const id = event.target.id;\r\n        const [, row, col] = id.split('-');\r\n        updateGrid(parseInt(row), parseInt(col));\r\n    };\r\n\r\n    const changeDrawingModeHandler = (event) => {\r\n        const id = event.target.id;\r\n        if (!(id === 'start' || id === 'end' || id === 'wall' || id === 'erase')) return;\r\n        setDrawingMode(id);\r\n    };\r\n\r\n    const checkIfRunning = () => {\r\n        try {\r\n            return document.getElementById('isRunning').classList.value === 'true';\r\n        } catch (error) {}\r\n    };\r\n\r\n    const startButtonHandler = () => {\r\n        try {\r\n            if (document.getElementById('isRunning').classList.value === 'true') return;\r\n            document.getElementById('isRunning').classList = 'true';\r\n        } catch (error) {}\r\n\r\n        const startingNode = grid[startNode.row][startNode.col];\r\n        const endingNode = grid[endNode.row][endNode.col];\r\n        dijkstraAlgorithm(grid, startingNode, endingNode, sleep, checkIfRunning);\r\n    };\r\n\r\n    const resetButtonHandler = () => {\r\n        try {\r\n            document.getElementById('isRunning').classList = 'false';\r\n        } catch (error) {}\r\n        resetGrid();\r\n    };\r\n\r\n    return (\r\n        <div className=\"pathfinding-container\">\r\n            <div className=\"left-container\" onClick={changeDrawingModeHandler}>\r\n                <div className={drawingMode === 'start' ? 'highlighted-drawing-mode' : null}>\r\n                    <div>\r\n                        <div className=\"legend-box starting-node\"></div>\r\n                        <h3 onClick={changeDrawingModeHandler} id={'start'}>\r\n                            Start\r\n                        </h3>\r\n                    </div>\r\n                    {drawingMode === 'start' && <p>{'(click to select the Start)'}</p>}\r\n                </div>\r\n                <div className={drawingMode === 'end' ? 'highlighted-drawing-mode' : null}>\r\n                    <div>\r\n                        <div>\r\n                            <div className=\"legend-box ending-node\"></div>\r\n                            <h3 onClick={changeDrawingModeHandler} id={'end'}>\r\n                                End\r\n                            </h3>\r\n                        </div>\r\n                    </div>\r\n                    {drawingMode === 'end' && <p>{'(click to select the End)'}</p>}\r\n                </div>\r\n                <div className={drawingMode === 'wall' ? 'highlighted-drawing-mode' : null}>\r\n                    <div>\r\n                        <div className=\"legend-box wall-node\"></div>\r\n                        <h3 onClick={changeDrawingModeHandler} id={'wall'}>\r\n                            Wall\r\n                        </h3>\r\n                    </div>\r\n                    {drawingMode === 'wall' && <p>{'(drag to draw Walls)'}</p>}\r\n                </div>\r\n                <div className={drawingMode === 'erase' ? 'highlighted-drawing-mode' : null}>\r\n                    <div>\r\n                        <div className=\"legend-box\"></div>\r\n                        <h3 onClick={changeDrawingModeHandler} id={'erase'}>\r\n                            Erase\r\n                        </h3>\r\n                    </div>\r\n                    {drawingMode === 'erase' && <p>{'(drag to reset a box)'}</p>}\r\n                </div>\r\n            </div>\r\n            <div style={{ height: '0px', width: '0px', position: 'sticky' }} id={'isRunning'} className={'false'}></div>\r\n            <div className=\"boxes-container\">\r\n                {grid.map((row) =>\r\n                    row.map(({ row, col, isEnd, isStart, isVisited, isWall }) => (\r\n                        <Node\r\n                            key={`node-${row}-${col}`}\r\n                            row={row}\r\n                            col={col}\r\n                            isEnd={isEnd}\r\n                            isStart={isStart}\r\n                            isVisited={isVisited}\r\n                            isWall={isWall}\r\n                            drawingMode={drawingMode}\r\n                            drawingHandler={drawingHandler}\r\n                            drawingHandlerClick={drawingHandlerClick}\r\n                        />\r\n                    ))\r\n                )}\r\n            </div>\r\n            <div className=\"right-container\">\r\n                <svg\r\n                    onClick={startButtonHandler}\r\n                    className=\"start-btn\"\r\n                    viewBox=\"0 0 70 80\"\r\n                    fill=\"none\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                    <path\r\n                        d=\"M67.5001 35.67C70.8334 37.5945 70.8334 42.4057 67.5001 44.3302L7.50005 78.9712C4.16672 80.8957 5.34058e-05 78.4901 5.34058e-05 74.6411L5.34058e-05 5.35909C5.34058e-05 1.51008 4.16672 -0.895545 7.50005 1.02896L67.5001 35.67Z\"\r\n                        fill=\"white\"\r\n                        stroke=\"white\"\r\n                    />\r\n                </svg>\r\n                <img\r\n                    onClick={resetButtonHandler}\r\n                    className=\"reset-btn\"\r\n                    src={process.env.PUBLIC_URL + '/reload.png'}\r\n                    alt=\"reload\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PathfindingVisualization;\r\n","// import React from 'react';\r\n\r\nconst SudokuVisualization = () => {};\r\n\r\nexport default SudokuVisualization;\r\n","import React from 'react';\r\n\r\nimport SortingVisualization from '../../algos-sorting/SortingVisualization';\r\nimport PathfindingVisualization from '../../algos-pathfinding/PathfindingVisualization';\r\nimport SudokuVisualization from '../../algos-sudoku/SudokuVisualization';\r\n\r\nconst AlgoVisualization = ({\r\n    algosType,\r\n    currentAlgo,\r\n    sticksAmount,\r\n    setSticksAmount,\r\n    sticks,\r\n    setSticks,\r\n    isRunning,\r\n    setIsRunning,\r\n    newSticks,\r\n    speed,\r\n    setSpeed,\r\n    boxesAmount,\r\n    setBoxesAmount,\r\n    boxes,\r\n    setBoxes,\r\n    newBoxes,\r\n    grid,\r\n    updateGrid,\r\n    drawingMode,\r\n    setDrawingMode,\r\n    startNode,\r\n    endNode,\r\n    resetGrid,\r\n    mouseIsPressed,\r\n}) => {\r\n    if (algosType === 'Sorting') {\r\n        return (\r\n            <SortingVisualization\r\n                algo={currentAlgo}\r\n                algosType={algosType}\r\n                currentAlgo={currentAlgo}\r\n                sticksAmount={sticksAmount}\r\n                setSticksAmount={setSticksAmount}\r\n                sticks={sticks}\r\n                setSticks={setSticks}\r\n                isRunning={isRunning}\r\n                setIsRunning={setIsRunning}\r\n                newSticks={newSticks}\r\n                speed={speed}\r\n                setSpeed={setSpeed}\r\n            />\r\n        );\r\n    } else if (algosType === 'Pathfinding') {\r\n        return (\r\n            <PathfindingVisualization\r\n                algo={currentAlgo}\r\n                algosType={algosType}\r\n                currentAlgo={currentAlgo}\r\n                boxesAmount={boxesAmount}\r\n                setBoxesAmount={setBoxesAmount}\r\n                boxes={boxes}\r\n                setBoxes={setBoxes}\r\n                isRunning={isRunning}\r\n                setIsRunning={setIsRunning}\r\n                newBoxes={newBoxes}\r\n                speed={speed}\r\n                setSpeed={setSpeed}\r\n                grid={grid}\r\n                updateGrid={updateGrid}\r\n                drawingMode={drawingMode}\r\n                setDrawingMode={setDrawingMode}\r\n                startNode={startNode}\r\n                endNode={endNode}\r\n                resetGrid={resetGrid}\r\n                mouseIsPressed={mouseIsPressed}\r\n            />\r\n        );\r\n    } else if (algosType === 'Sudoku') {\r\n        return <SudokuVisualization algo={currentAlgo} />;\r\n    }\r\n};\r\n\r\nexport default AlgoVisualization;\r\n","import React from 'react';\r\n\r\nimport './AlgoExplanation.css';\r\n\r\nconst AlgoExplanation = ({ explanation }) => {\r\n    return (\r\n        <div className=\"explanation-container\">\r\n            <h2>Explanation</h2>\r\n            <p>{explanation}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgoExplanation;\r\n","import React from 'react';\r\n\r\nimport './AlgoCode.css';\r\n\r\nconst AlgoCode = ({ code }) => {\r\n    return (\r\n        <div>\r\n            <div className=\"code-container\">\r\n                <h2>Code</h2>\r\n                <img src={process.env.PUBLIC_URL + `/${code}`} alt=\"algorithm-code\" />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgoCode;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { anime } from 'react-anime';\r\n\r\nimport Background from '../Background/Background';\r\n\r\nimport AlgoHead from './AlgoHead';\r\nimport AlgoOverview from './AlgoOverview';\r\nimport AlgoVisualization from './AlgoVisualization';\r\nimport AlgoExplanation from './AlgoExplanation';\r\nimport AlgoCode from './AlgoCode';\r\n\r\nimport './AlgoLayout.css';\r\nimport '../Background/Background.css';\r\n\r\nconst ROWS = 20;\r\nconst COLS = 40;\r\n\r\nconst rndm = () => {\r\n    return Math.round(Math.random() * 999 + 1) / 10;\r\n};\r\n\r\nconst isIn = (array, num) => {\r\n    let output = false;\r\n    array.forEach((e) => {\r\n        if (e === num) output = true;\r\n    });\r\n    return output;\r\n};\r\n\r\nconst newSticks = (numberOfSticks) => {\r\n    const sticks = [];\r\n    for (let i = 0; i < numberOfSticks; i++) {\r\n        let stickHeight;\r\n        for (let j = 0; j < 1000; j++) {\r\n            let random = rndm();\r\n            if (!isIn(sticks, random)) {\r\n                stickHeight = random;\r\n                break;\r\n            }\r\n        }\r\n        sticks.push(stickHeight);\r\n    }\r\n    return sticks;\r\n};\r\n\r\n/* props.data: {\r\n    ALGOSTYPE, \r\n    ALGOS: [{\r\n        name, \r\n        intro, \r\n        explanation, \r\n        code, \r\n        complexity: {\r\n            worstTime, \r\n            bestTime, \r\n            AvgTime, \r\n            space\r\n        }\r\n            \r\n    }],\r\n    \r\n} */\r\nconst AlgoLayout = ({ algosType, algos, otherAlgos, changeAlgosTypeHandler }) => {\r\n    const [currentAlgo, setCurrentAlgo] = useState(algos[0].name);\r\n    const [sticksAmount, setSticksAmount] = useState(50);\r\n    const [sticks, setSticks] = useState(newSticks(sticksAmount));\r\n    const [startNode, setStartNode] = useState({ row: 8, col: 5 });\r\n    const [endNode, setEndNode] = useState({ row: 12, col: 34 });\r\n    const [drawingMode, setDrawingMode] = useState('wall');\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [speed, setSpeed] = useState(100);\r\n    const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n\r\n    const onMouseDownHandler = () => {\r\n        if (algosType !== 'Sorting') {\r\n            setMouseIsPressed(true);\r\n        }\r\n    };\r\n\r\n    const onMouseUpHandler = () => {\r\n        setMouseIsPressed(false);\r\n    };\r\n\r\n    let currentAlgoData;\r\n    algos.forEach((e) => (e.name === currentAlgo ? (currentAlgoData = e) : null));\r\n\r\n    const newNode = (row, col) => {\r\n        return {\r\n            row,\r\n            col,\r\n            distance: Infinity,\r\n            isStart: row === startNode.row && col === startNode.col,\r\n            isEnd: row === endNode.row && col === endNode.col,\r\n            isWall: false,\r\n            isVisited: false,\r\n            prevNode: null,\r\n        };\r\n    };\r\n\r\n    const newGrid = (rows, cols, isReset = false) => {\r\n        let grid = [];\r\n        for (let row = 0; row < rows; row++) {\r\n            let currentRow = [];\r\n            for (let col = 0; col < cols; col++) {\r\n                currentRow.push(newNode(row, col));\r\n                if (isReset) {\r\n                    try {\r\n                        document.getElementById(`box-${row}-${col}`).classList = `box${row === startNode.row && col === startNode.col ? ' starting-node' : ''}${\r\n                            row === endNode.row && col === endNode.col ? ' ending-node' : ''\r\n                        }`;\r\n                    } catch (error) {}\r\n                }\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    };\r\n\r\n    const [grid, setGrid] = useState(newGrid(ROWS, COLS));\r\n\r\n    const resetGrid = () => {\r\n        setGrid(newGrid(ROWS, COLS, true));\r\n    };\r\n\r\n    const updateGrid = (row, col) => {\r\n        if ((row === startNode.row.toString() && col === startNode.col.toString()) || (row === endNode.row.toString() && col === endNode.col.toString())) return;\r\n        const newGrid = grid.slice();\r\n        let updateNode = newGrid[row][col];\r\n\r\n        updateNode['isEnd'] = false;\r\n        updateNode['isWall'] = false;\r\n        updateNode['isStart'] = false;\r\n\r\n        switch (drawingMode) {\r\n            case 'end':\r\n                document.getElementById(`box-${endNode.row}-${endNode.col}`).classList.remove('ending-node');\r\n                updateNode['isEnd'] = true;\r\n                setEndNode({ row, col });\r\n                break;\r\n            case 'start':\r\n                document.getElementById(`box-${startNode.row}-${startNode.col}`).classList.remove('starting-node');\r\n                updateNode['isStart'] = true;\r\n                setStartNode({ row, col });\r\n                break;\r\n            case 'wall':\r\n                updateNode['isWall'] = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setGrid(newGrid);\r\n    };\r\n\r\n    const changeAlgoHandler = (newAlgo) => {\r\n        setCurrentAlgo(newAlgo);\r\n\r\n        if (isRunning) {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            }, 2000);\r\n        } else {\r\n            setIsRunning(false);\r\n            setSticks(false);\r\n            setTimeout(() => {\r\n                setSticks(newSticks(sticksAmount));\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const animation = () => {\r\n            const timeline = anime.timeline();\r\n            timeline.add({\r\n                targets: '.stick',\r\n                opacity: [0, 1],\r\n                scale: [0.1, 1],\r\n                duration: 500,\r\n                easing: 'easeInQuad',\r\n            });\r\n        };\r\n        animation();\r\n    }, [sticks]);\r\n\r\n    return (\r\n        <div className=\"wrapper\" onMouseDown={onMouseDownHandler} onMouseUp={onMouseUpHandler}>\r\n            <Background />\r\n            <div className=\"algo-layout-container\">\r\n                <AlgoHead changeAlgoHandler={changeAlgoHandler} changeAlgosTypeHandler={changeAlgosTypeHandler} algosType={algosType} currentAlgo={currentAlgo} algos={algos} otherAlgos={otherAlgos} />\r\n                <AlgoOverview intro={currentAlgoData.intro} complexity={currentAlgoData.complexity} />\r\n                <AlgoVisualization\r\n                    algosType={algosType}\r\n                    currentAlgo={currentAlgo}\r\n                    sticksAmount={sticksAmount}\r\n                    setSticksAmount={setSticksAmount}\r\n                    sticks={sticks}\r\n                    setSticks={setSticks}\r\n                    isRunning={isRunning}\r\n                    setIsRunning={setIsRunning}\r\n                    newSticks={newSticks}\r\n                    speed={speed}\r\n                    setSpeed={setSpeed}\r\n                    grid={grid}\r\n                    updateGrid={updateGrid}\r\n                    drawingMode={drawingMode}\r\n                    setDrawingMode={setDrawingMode}\r\n                    startNode={startNode}\r\n                    endNode={endNode}\r\n                    resetGrid={resetGrid}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                />\r\n                <AlgoExplanation explanation={currentAlgoData.explanation} />\r\n                <AlgoCode code={currentAlgoData.code} />\r\n                <hr style={{ backgroundColor: 'white', marginTop: '30px' }} />\r\n                <div style={{ height: '100px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                    <h3>Copyright {new Date(Date.now()).getFullYear()} Timo Diehm</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgoLayout;\r\n","const sortingAlgorithms = [\r\n    {\r\n        name: 'Bubble Sort',\r\n        intro:\r\n            'This is one of the slowest sorting algorithms due to its simplicity. Nevertheless, it is relatively easy and quick to implement.',\r\n        explanation:\r\n            'This algorithm simply iterates through the array while changing two items one by one if they are not in the right order. In this visualization, the algorithm iterates through the array from left to right and swaps the position of two sticks if the first one is bigger than the second one until there was a complete iteration without any swap. That means the array is sorted. Although it is not efficient, it is easy to implement and recommendable if the array is relatively small.',\r\n        code: 'bubbleSort.png',\r\n        complexity: {\r\n            worstTime: 'O(n^2)',\r\n            bestTime: 'O(n) ',\r\n            avgTime: 'O(n^2)',\r\n            space: 'O(1) ',\r\n        },\r\n        difficulty: 'easy',\r\n        type: 'Sorting',\r\n    },\r\n    {\r\n        name: 'Merge Sort',\r\n        intro: 'This is an efficient, comparison-based, divide-and-conquer sorting algorithm.',\r\n        explanation:\r\n            'Merge sort repeatedly breaks down an array into several subarrays until each subarray consists of a single element and merging those subarrays in a manner that results into a sorted array.',\r\n        code: 'mergeSort.png',\r\n        complexity: {\r\n            worstTime: 'O(n log(n))',\r\n            bestTime: 'O(n log(n))',\r\n            avgTime: 'O(n log(n))',\r\n            space: 'O(n)',\r\n        },\r\n        difficulty: 'middle',\r\n        type: 'Sorting',\r\n    },\r\n    {\r\n        name: 'Quicksort',\r\n        intro:\r\n            'This is an efficient, commonly used, divide-and-conquer algorithm, wich is averagely faster than Merge Sort.',\r\n        explanation:\r\n            'Quicksort creates two empty arrays to hold elements less than the pivot value and elements greater than the pivot value, and then recursively sort the subarrays. There are two basic operations in this algorithm, swapping items in place and partitioning a section of the array.',\r\n        code: 'quickSort.png',\r\n        complexity: {\r\n            worstTime: 'O(n^2)',\r\n            bestTime: 'O(n log(n))',\r\n            avgTime: 'O(n log(n))',\r\n            space: 'O(1)',\r\n        },\r\n        difficulty: 'middle',\r\n        type: 'Sorting',\r\n    },\r\n    {\r\n        name: 'Tim Sort',\r\n        intro:\r\n            'Deriving from Merge Sort and Insertion Sort, this is a hybrid algorithm, which is very efficient but also not easy to implement.',\r\n        explanation:\r\n            'Tim Sort divides the Array into blocks known as Run. It sort those runs using insertion sort one by one and then merge those runs using the combine function used in merge sort. If the size of the Array is less than run, then Array gets sorted just by using Insertion Sort. It unifies the strength of merge sort when the size of subarrays are the powers of 2 and the performance of insertion sort for small arrays.',\r\n        code: 'timSort.png',\r\n        complexity: {\r\n            worstTime: 'O(n log(n))',\r\n            bestTime: 'O(n)',\r\n            avgTime: 'O(n log(n))',\r\n            space: 'O(n)',\r\n        },\r\n        difficulty: 'hard',\r\n        type: 'Sorting',\r\n    },\r\n];\r\n\r\nexport default sortingAlgorithms;\r\n","const pathfindingAlgorithmsInformation = [\r\n    {\r\n        name: \"Dijkstra's Algorithm\",\r\n        intro: 'This is the light version of the common advanced pathfinding algorithm from dijkstra.',\r\n        explanation:\r\n            'Since this is just one simplified version of dijkstra and this project is mainly about the visualization, there will not be an explanation.',\r\n        code: 'dijkstra.png',\r\n        type: 'Pathfinding',\r\n    },\r\n];\r\n\r\nexport default pathfindingAlgorithmsInformation;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst Backdrop = (props) => {\r\n    return ReactDOM.createPortal(<div className=\"backdrop\" onClick={props.onClick}></div>, document.getElementById('backdrop-hook'));\r\n};\r\n\r\nexport default Backdrop;\r\n","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { anime } from 'react-anime';\r\n\r\nimport Backdrop from './Backdrop';\r\nimport './Modal.css';\r\n\r\nconst ModalOverlay = (props) => {\r\n    useEffect(() => {\r\n        const animation = () => {\r\n            const timeline = anime.timeline();\r\n            timeline\r\n                .add({\r\n                    targets: '.title',\r\n                    opacity: [0, 1],\r\n                    translateY: [500, 0],\r\n                    translateX: [70, 0],\r\n                    scale: [10, 1],\r\n                    duration: 500,\r\n                    easing: 'easeInQuad',\r\n                })\r\n                .add(\r\n                    {\r\n                        targets: '.left',\r\n                        opacity: [0, 1],\r\n                        translateX: [-100, 0],\r\n                        duration: 500,\r\n                        easing: 'linear',\r\n                    },\r\n                    '-=200'\r\n                )\r\n                .add(\r\n                    {\r\n                        targets: '.right',\r\n                        opacity: [0, 1],\r\n                        translateX: [100, 0],\r\n                        duration: 500,\r\n                        easing: 'linear',\r\n                    },\r\n                    '-=500'\r\n                )\r\n                .add(\r\n                    {\r\n                        targets: '.img',\r\n                        opacity: [0, 1],\r\n                        scale: [0.5, 1],\r\n                        duration: 500,\r\n                        easing: 'linear',\r\n                    },\r\n                    '-=500'\r\n                );\r\n        };\r\n        animation();\r\n    }, []);\r\n\r\n    const content = (\r\n        <div className=\"modal-wrapper\">\r\n            <div className={`modal`}>\r\n                <header className={`modal__header`}>\r\n                    <h1 className=\"title\">Welcome to my Algorithm Visualization Project!</h1>\r\n                    <img src={process.env.PUBLIC_URL + '/picture_of_me.jpg'} className=\"img\" alt=\"Timo Diehm\" />\r\n                </header>\r\n                <form onSubmit={(event) => event.preventDefault()}>\r\n                    <div className={`modal__content`}>\r\n                        <div className=\"left\">\r\n                            <h3>What is this project about?</h3>\r\n                            <br />\r\n                            <p>\r\n                                In this website project different algorithms are presented visually. Although they are briefly expained, the purpose of this project is not to explain them to persons,\r\n                                who don't know anything about programming. Nevertheless, if you are one of those persons, you can just play around. There are two types of algorithms in this project:\r\n                                sorting algorithms and pathfinding algorithms.\r\n                                <br />\r\n                                A sorting algorithm is used to arrange data in an ascending or descending order. Being sorted, the data is much more useful to work with. An easy example would be to\r\n                                sort emails by sent date so they show up properly. In Computer Science there isn't such an easy solution as it could been thought by people, who aren't into it. The\r\n                                time it takes to sort data can quickly increase exponentially to it's length. Especially nowadays, in the age of Big Data, sorting efficiently is enormously important.\r\n                                Google, for instance, first rates websites matching your search criteria and afterwards sort them in order of their rating. This should obviously happen as fast as\r\n                                possible.\r\n                                <br /> A patihfinding algorithm is used to basically find the shortest path. An example is Google Maps. I think this is pretty self explanatory.\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"right\">\r\n                            <div>\r\n                                <h3>How to use this website?</h3>\r\n                                <br />\r\n                                <p>\r\n                                    For the sorting algorithms:\r\n                                    <br />\r\n                                    Sticks with a specific height are used to represent a specific number. At first, they are randomly arranged. By pressing the start button the currently selected\r\n                                    algorithm then sorts those sticks. You can also adjust speed and amount of sticks by either selecting a preset or by customly changing them. For each algorithm,\r\n                                    there is a brief introduction, a longer description and the semi original code I used. Being quite complex with all the animation code within the original algorithm\r\n                                    code, I shortened it by the specific visualization code.\r\n                                </p>\r\n                                <br />\r\n                                <p>\r\n                                    For the pathfinding algorithms:\r\n                                    <br />\r\n                                    In the grid, there is a starting and an ending point. You can either change them by selecting the right tool on the left side or you can just start drawing walls in\r\n                                    the grid. If you want to reset a specific box, then just select the erasing tool.\r\n                                </p>\r\n                                <br />\r\n                                <p>To change the current algorithm, just hover over the name at the top of the screen and select another algorithm.</p>\r\n                                <br />\r\n                                <p>Please consider that this is opitmized for the Chrome browser and not made for any screen size other than desktop!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <footer className={`modal__footer ${props.footerClass}`}>\r\n                        <button onClick={() => props.onCancel()}>GOT IT!</button>\r\n                    </footer>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n    return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n};\r\n\r\nconst Modal = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            {props.show && <Backdrop onClick={props.onCancel} />}\r\n            <ModalOverlay {...props} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState } from 'react';\r\n\r\nimport AlgoLayout from '../components/shared/AlgoLayout/AlgoLayout';\r\nimport sortingAlgorithms from '../algo-data/sorting/sortingAlgorithmsInformation';\r\nimport pathfindingAlgorithms from '../algo-data/pathfinding/pathfindingAlgorithmsInformation';\r\nimport Modal from '../components/shared/Modal/Modal';\r\n\r\nconst Algos = () => {\r\n    const [firstVisit, setFirstVisit] = useState(true);\r\n    const [algosType, setAlgosType] = useState('Sorting');\r\n\r\n    const changeAlgosTypeHandler = (type) => {\r\n        setAlgosType(type);\r\n    };\r\n\r\n    let algos;\r\n    let otherAlgos;\r\n    if (algosType === 'Sorting') {\r\n        algos = sortingAlgorithms;\r\n        otherAlgos = pathfindingAlgorithms;\r\n    } else if (algosType === 'Pathfinding') {\r\n        algos = pathfindingAlgorithms;\r\n        otherAlgos = sortingAlgorithms;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {firstVisit && <Modal show={true} onCancel={() => setFirstVisit(false)} />}\r\n            <AlgoLayout\r\n                algosType={algosType}\r\n                algos={algos}\r\n                otherAlgos={otherAlgos}\r\n                changeAlgosTypeHandler={changeAlgosTypeHandler}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Algos;\r\n","import React from 'react';\n// import { BrowserRouter as Route, Redirect, Switch } from 'react-router-dom';\n\n// import {Context} from './components/context/context';\nimport Algos from './pages/Algos';\n\nfunction App() {\n    // const routes = (\n    //     <Switch>\n    //         <Route path=\"/algorithms/sorting\" exact>\n    //             <SortingAlgos />\n    //         </Route>\n    //         <Route path=\"/\" exact>\n    //             <SortingAlgos />\n    //         </Route>\n    //         <Redirect to=\"/\" />\n    //     </Switch>\n    // );\n\n    return (\n        // <Router>\n        //     <Suspense fallback={<div>Loading Screen..</div>}>{routes}</Suspense>\n        // </Router>\n        <div>\n            <Algos />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}